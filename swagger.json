{
  "swagger": "2.0",
  "info": {
    "title": "Dkube api server",
    "version": "3.3.0.15"
  },
  "schemes": [
    "https"
  ],
  "host": "192.168.200.142:32222",
  "basePath": "/dkube/v2/controller",
  "consumes": [
    "application/keyauth.api.v1+json",
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "d3apikey": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Dkube JWT token for api access"
    }
  },
  "tags": [
    {
      "name": "dfab",
      "description": "Dfab APIs which only operator has access to.",
      "externalDocs": {
        "description": "Find out more @",
        "url": "http://oneconvergence.com/dkube/docs"
      }
    },
    {
      "name": "dkube",
      "description": "Dkube APIs which both operator and datascientist has access to.",
      "externalDocs": {
        "description": "Find out more @",
        "url": "http://oneconvergence.com/dkube/docs"
      }
    },
    {
      "name": "dkube-operator-exclusive",
      "description": "Dkube APIs which only operator can invoke.",
      "externalDocs": {
        "description": "Find out more @",
        "url": "http://oneconvergence.com/dkube/docs"
      }
    },
    {
      "name": "modelmonitor",
      "description": "Dkube APIs for Modelmonitor.",
      "externalDocs": {
        "description": "Find out more @",
        "url": "http://oneconvergence.com/dkube/docs"
      }
    }
  ],
  "paths": {
    "/admin/cluster": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "clusterStatus",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "API to fetch the status of various clusters",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "components": {
                  "$ref": "#/definitions/ClusterStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/dlsupport": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "dlsupport",
        "summary": "API to fetch all the dl support by dkube",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/DLSupport"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/dlframeworks": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "dl_frameworks",
        "summary": "API to fetch all the frameworks",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "class",
            "in": "query",
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/DLFrameworks"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/clusters": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_clusters",
        "summary": "API to fetch configured clusters",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Cluster"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "configure_clusters",
        "summary": "API to configure execution clusters to dkube.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "clusters": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Cluster"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/clusters/{clustername}": {
      "delete": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "delete_cluster",
        "summary": "API to delete a cluster configuration from dkube",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "update_cluster",
        "summary": "API to update a cluster configuration.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/clusters/{clustername}/details": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_cluster_details",
        "summary": "API to get the details for a cluster",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "clustername",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ClusterDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/job/scheduling/jsonform": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "jsonform",
        "summary": "API to fetch json form for slurm job scheduling",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "form": {
                      "$ref": "#/definitions/JsonForm"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/dkubeinfo": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "dkubeinfo",
        "summary": "API to fetch all the information about dkube installation",
        "parameters": [
          {
            "name": "authmode",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/DkubeInfo"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/refreshLicense": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "refreshLicense",
        "summary": "API to refresh user license",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/admin/diag": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "diag",
        "summary": "API to manage admin related operations.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "debug": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/admin/logger": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "log_viewer_post",
        "summary": "API to enable Fluentd to talk to a log viewer",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LogViewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "log_viewer_put",
        "summary": "API to edit log viewer configuration in Fluentd",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LogViewer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "log_viewer_delete",
        "summary": "API to remove log viewer configuration from Fluentd",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "log_viewer_get",
        "summary": "API to get log viewer configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/LogViewer"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "login",
        "summary": "API to login into dkube. Unique API key is returned using which user can access dkube apis. API key access will be scoped based on the role of the user.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuthModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "jwt": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "group": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "logout",
        "summary": "API to logoff from the dkube. The API key will be revoked and invalidated.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/license/update": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "license_update",
        "summary": "API to update dkube license.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "secret": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/token/validate": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "tokeninfo",
        "summary": "API to fetch all claims for a jwt token",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/TokenInfo"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/role/update": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "role_update",
        "summary": "API to promote/demote a user.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "role": {
                  "type": "string",
                  "description": "Expected role of user."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/init": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "init",
        "summary": "API to initialize the dkube. The user initializing should be an admin and will be auto onboarded into dkube with operator role.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuthModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/onboard": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "onboard",
        "summary": "API to onboard a user into dkube.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "users"
              ],
              "properties": {
                "users": {
                  "type": "array",
                  "description": "Name of the valid users. Each  user should be a valid github user.",
                  "items": {
                    "type": "string"
                  }
                },
                "role": {
                  "type": "string"
                },
                "default_group": {
                  "type": "string"
                },
                "groups": {
                  "type": "array",
                  "description": "Name of the valid group. This should be a valid group existing in dkube.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/offboard": {
      "delete": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "offboard",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "API to offboard a user into dkube.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "users"
              ],
              "properties": {
                "users": {
                  "type": "array",
                  "description": "Name of the valid users. Each  user should be a valid github user.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/sync/{kind}": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "sync",
        "summary": "API to sync D3 db with the resources available in cluster This also synchronizes members from github.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "kind",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "users",
              "groups"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/sync/groups/{group}": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "syncGroupUsers",
        "summary": "API to sync D3 db with the resources available in cluster This also synchronizes members from github.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "members": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/recover/": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "recover",
        "summary": "API to recover the D3 system.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/triggers/runs": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "trigger_runs_by_condition",
        "summary": "Triggers runs in dkube which satisfies the condition specified",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "conditions",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "match": {
                  "type": "string",
                  "enum": [
                    "dataset",
                    "model",
                    "project"
                  ]
                },
                "user": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "description": "All the runs which got triggered.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "string"
                      },
                      "run": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/dvs/config": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_dvs_config",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "API to list dkube version management system config.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DVSModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "add_dvs_config",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "API to configuring dkube version management system.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DVSModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "delete_dvs_config",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "API to delete dkube version management system configuration.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "dvs"
              ],
              "properties": {
                "dvs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of DVS config to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/update_groups": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "update_user_groups",
        "summary": "API to update user groups.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "user",
                "groups"
              ],
              "properties": {
                "user": {
                  "type": "string"
                },
                "default_group": {
                  "type": "string"
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/preferences": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_datum_prev_cred",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "summary": "API to get previous datum creation auth credentials.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/LastUsedCredentials"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/preferences": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_all_datum_prev_cred",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "API to get previous datum creation auth credentials of all users in dkube.",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/LastUsedCredentials"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/rbac/roles": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "add_role",
        "summary": "API to add a role.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleModel"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_all_roles",
        "summary": "API to get all roles.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/RoleModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/rbac/roles/{rolename}": {
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "update_role",
        "summary": "API to update a role.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "rolename",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_role",
        "summary": "API to get details of a required role.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "rolename",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/RoleModel"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_add_one",
        "summary": "API to add a datum.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "extract",
            "in": "query",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatumModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datum/{class}/{datum}/addversion": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "add_version",
        "summary": "API to add version of a datum.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pipelineid",
            "in": "query",
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "$ref": "#/definitions/VersionModel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/groups": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "job_group_add_one",
        "summary": "API to add a job group.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobGroupModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_job_groups",
        "summary": "API to get all job gropus.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobGroupModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/rungroups/{rungroup}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "run_group_update",
        "summary": "API to update a run group.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rungroup",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunGroupModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/repos/class/{class}/repo/{repo}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "repo_update_one",
        "summary": "API to update a datum.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RepoModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/{class}/templates/{template}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "update_template_one",
        "summary": "API to update a template.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "training",
              "preprocessing"
            ]
          },
          {
            "name": "template",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunTemplateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/{class}/runs/{run}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "update_run_one",
        "summary": "Update description of a run.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "training",
              "preprocessing"
            ]
          },
          {
            "name": "run",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalog/{model}/version/{version}": {
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "update_model_in_catalog",
        "summary": "API to update a model in model catalog",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datum/version/{uuid}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "update_datum_version_model",
        "summary": "Update version model info of a datum.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "description": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/sessionkey": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_session_key",
        "summary": "API to get session key(static jwt token)",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "revoke_session_key",
        "summary": "API to renew the session key(static jwt token)",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/datum/{datum}/abort": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "datum_one_abort_download",
        "summary": "API to abort a download",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/datum/{datum}/start": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "datum_one_restart_download",
        "summary": "API to restart a failed datum download",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "extract",
            "in": "query",
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatumModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/datum/{datum}/refresh": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datum_refresh_one",
        "summary": "API to refresh the contents of an existing downloaded datum",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/datums/fsx/profile": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_fsx_profile",
        "summary": "API to get fsx volumes info from global profile",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "dnsname": {
                        "type": "string"
                      },
                      "volumehandle": {
                        "type": "string"
                      },
                      "mountname": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/stats/resources": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "GPU's capability",
        "summary": "API to get GPU's capability of a user, job, cluster, node.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "source",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "total_gpus",
                    "used_gpus"
                  ],
                  "properties": {
                    "total_gpus": {
                      "type": "integer"
                    },
                    "used_gpus": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/capability": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "user_capability",
        "summary": "API to get capabilities of a user.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "total_gpus",
                    "free_gpus"
                  ],
                  "properties": {
                    "total_gpus": {
                      "type": "integer"
                    },
                    "free_gpus": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/datum/{datum}/": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_get_one_by_class",
        "summary": "API to get a datums of a class. Refer 'DatumClassType' definition for possible values of class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "datum": {
                      "$ref": "#/definitions/DatumModel"
                    },
                    "owner": {
                      "type": "string"
                    },
                    "versions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "$ref": "#/definitions/VersionModel"
                          },
                          "details": {
                            "$ref": "#/definitions/VersionDetails"
                          },
                          "jobs": {
                            "type": "array",
                            "description": "List of jobs used by datum version",
                            "items": {
                              "$ref": "#/definitions/DatumJobDetails"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_get_by_class",
        "summary": "API to get all datums by class. Refer 'DatumClassType' definition for possible values of class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "shared",
            "in": "query",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "archived",
            "in": "query",
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "if page value is zero return all datums"
          },
          {
            "name": "versions",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "owner": {
                        "type": "string"
                      },
                      "datums": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "datum": {
                              "$ref": "#/definitions/DatumModel"
                            },
                            "versions": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/VersionModel"
                              }
                            },
                            "search": {
                              "type": "object",
                              "properties": {
                                "datasets": {
                                  "type": "array",
                                  "description": "filled use.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "version": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_delete_by_class",
        "summary": "API to delete all datums by class. Refer 'DatumClassType' definition for possible values of class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datums"
              ],
              "properties": {
                "datums": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of datums to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/archive": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_archive_by_class",
        "summary": "API to archive  or un-archive all datums by class. Refer 'DatumClassType' definition for possible values of class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "archive",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datums"
              ],
              "properties": {
                "datums": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of datums to archive"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalogs/metrics": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "modelcatalog_get_metrics",
        "summary": "API to get metrics of a list of modelcatalogs",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "modelcatalogs"
              ],
              "properties": {
                "modelcatalogs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of modelcatalogs"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "$ref": "#/definitions/ModelCatalogMetrics"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/metrics": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_get_metrics",
        "summary": "API to get metrics of a list of datum",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "datums"
              ],
              "properties": {
                "datums": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of datums"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "$ref": "#/definitions/DatumMetrics"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/datum/{datum}/versions/{version}/metrics": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_get_one_version_metrics",
        "summary": "API to get metrics of a model",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "$ref": "#/definitions/ModelMetrics"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/publishedmodels": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_all_published_models",
        "summary": "API to get all published models",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "if page value is zero return all datums"
          },
          {
            "name": "versions",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "owner": {
                        "type": "string"
                      },
                      "datums": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/DatumModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalog/{model}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_one_modelcatalog_model",
        "summary": "API to fetch the model catalog",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ModelCatalogItem"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalogname/{model}": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_model_catalog_name",
        "summary": "API to fetch the model catalog name for the given model",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "publishedName": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalog/models/{model}/versions/{version}/update": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "Update_model_catalog",
        "summary": "API to update modelcatalog version item",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalog/models/{model}/versions/{version}/delete": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "Delete_model_catalog_item",
        "summary": "API to delete modelcatalog version item",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/modelcatalog": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_model_catalog",
        "summary": "API to fetch the model catalog",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ModelCatalog"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/releasedmodels": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_released_models",
        "summary": "API to fetch the released model",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ReleasedModels"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/models/{model}/versions/{version}/release": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_release_one_model",
        "summary": "API to release a model",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/models/{model}/versions/{version}/publish": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_publish_one_model",
        "summary": "API to publish a model",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "serving": {
                  "$ref": "#/definitions/InferenceJobModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/models/{model}/versions/{version}/deploy": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_deploy_one_model",
        "summary": "API to deploy a model",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "serving": {
                  "$ref": "#/definitions/InferenceJobModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/models/{model}/versions/{version}/testdeploy": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_testdeploy_one_model",
        "summary": "API to deploy a model in dev cluster",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "serving": {
                  "$ref": "#/definitions/InferenceJobModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/datums/class/{class}/datum/{datum}/versions/{version}/lineage": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "datums_get_one_version_lineage",
        "summary": "API to get lineage of a datum version",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "datum",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "datum": {
                      "$ref": "#/definitions/DatumModel"
                    },
                    "version": {
                      "$ref": "#/definitions/VersionModel"
                    },
                    "run": {
                      "$ref": "#/definitions/JobModel"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/runs/{runid}/lineage": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_one_run_lineage",
        "summary": "API to get lineage of a run",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "runid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "run": {
                      "$ref": "#/definitions/JobModel"
                    },
                    "outputs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "datum": {
                            "$ref": "#/definitions/DatumModel"
                          },
                          "version": {
                            "$ref": "#/definitions/VersionModel"
                          },
                          "featureset": {
                            "$ref": "#/definitions/FeatureSetDef"
                          },
                          "featureset_version": {
                            "$ref": "#/definitions/FeatureSetVersionDef"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/{job}/logs/": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "logs_get_one",
        "summary": "API to get logs of a job",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_add_one",
        "summary": "API to add a new job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run",
            "in": "query",
            "type": "string"
          },
          {
            "name": "rerun",
            "in": "query",
            "type": "string"
          },
          {
            "name": "execute",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "subclass",
            "in": "query",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JobModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/jobs/uuid/{uuid}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_get_one_by_uuid",
        "summary": "API to get a job by uuid.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/JobModel"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/jobs/class/{class}/uuid/{uuid}": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_delete_one_by_uuid",
        "summary": "API to delete a job by uuid.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/class/{class}/jobs/{job}/abort": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_abort_one",
        "summary": "API to abort a single job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/class/{class}/jobs/{job}/start": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_start_one",
        "summary": "API to start an aborted job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/inference/{job}/update": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "update_inference",
        "summary": "API to update inference job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InferenceJobModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/deployments/": {
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_all_deployments",
        "summary": "API to get inference endpoints.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "owner": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      },
                      "endpoint": {
                        "type": "string"
                      },
                      "stage": {
                        "enum": [
                          "test",
                          "staged",
                          "deployment"
                        ]
                      },
                      "timeStamps": {
                        "$ref": "#/definitions/TimeStamps"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/inference/{job}/monitoring": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "inference_monitoring",
        "summary": "API to update inference job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/InferenceMonitoringOutModel"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_get_by_class",
        "summary": "API to get jobs of a user by class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "shared",
            "in": "query",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "run",
            "in": "query",
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "type": "string"
          },
          {
            "name": "archived",
            "in": "query",
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "if page value is zero return all runs"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "owner": {
                        "type": "string"
                      },
                      "jobs": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/JobModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_list_delete_by_class",
        "summary": "API to delete jobs by class. Refer to 'JobClassType' definition for possible values of class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "jobs"
              ],
              "properties": {
                "jobs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of jobs to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/archive": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_list_archive_by_class",
        "summary": "API to archive or un-archive jobs by class. Refer to 'JobClassType' definition for possible values of class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "archive",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "jobs"
              ],
              "properties": {
                "jobs": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of jobs to archive/un-archive"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/userprofiles": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "create_user_profile",
        "summary": "Create a user profile in dkube",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "inline",
                    "server"
                  ]
                },
                "server": {
                  "type": "string",
                  "description": "Address of server to download from"
                },
                "inline": {
                  "$ref": "#/definitions/UserProfile"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "update_user_profile",
        "summary": "Update a user profile in dkube",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "inline",
                    "server"
                  ]
                },
                "server": {
                  "type": "string",
                  "description": "Address of server to download from"
                },
                "inline": {
                  "$ref": "#/definitions/UserProfile"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "list_user_profiles",
        "summary": "list all user profiles",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserProfile"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/userprofiles/{profile}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_single_user_profile",
        "summary": "Fetch single user profile",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/UserProfile"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "attach_user_profile",
        "summary": "Attach profile to a user",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "profile",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/collection": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_get_collection_all",
        "summary": "API to get jobs collection for all jobs.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string"
                      },
                      "jobs": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/JobCollection"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/job/{job}/tensorboard/start": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "start_tensorboard",
        "summary": "API to start tensorboard for a given job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/job/{job}/tensorboard/stop": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "stop_tensorboard",
        "summary": "API to stop tensorboard for a given job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/job/{job}/collection": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobs_get_collection_one",
        "summary": "API to get jobs collection for single job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/JobCollection"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/jobs/class/{class}/collection": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "job_get_collection_all_by_class",
        "summary": "API to get jobs collection for all jobs of a class.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "class",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run",
            "in": "query",
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "type": "string"
          },
          {
            "name": "group",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/collection": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "users_get_collection_all",
        "summary": "API to get user collection for all users.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/UserCollection"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/{user}/collection": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "user_get_collection_one",
        "summary": "API to get user collection for single user.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/UserCollection"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/users/allusers": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "users_get_all",
        "summary": "API to get all the users.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "notonboarded",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "$ref": "#/definitions/UserModel"
                      },
                      "gpus": {
                        "type": "integer",
                        "default": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/groups/": {
      "post": {
        "tags": [
          "dfab"
        ],
        "operationId": "groups_create_one_or_update",
        "summary": "API to create a new group if not present and update group with pools and users.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groupname",
                "users",
                "pools"
              ],
              "properties": {
                "upsert": {
                  "type": "boolean",
                  "default": true
                },
                "groupname": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "users": {
                  "type": "array",
                  "description": "List of users by names to be added into this group.",
                  "items": {
                    "type": "string"
                  }
                },
                "pools": {
                  "type": "array",
                  "description": "List of pools by names to be added into this group.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dfab"
        ],
        "operationId": "groups_delete_list",
        "summary": "API to delete a list of groups",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "groups"
              ],
              "properties": {
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/groups/collection": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "groups_get_collection_all",
        "summary": "API to get all the groups.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "notonboarded",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupCollection"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/groups/{group}/collection": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "groups_get_collection_one",
        "summary": "API to get all the groups.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/GroupCollection"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pools/": {
      "post": {
        "tags": [
          "dfab"
        ],
        "operationId": "pools_create_one_or_update",
        "summary": "API to create a new pool if not present and update group with pools and users.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "poolname",
                "pooltype",
                "ndevices"
              ],
              "properties": {
                "upsert": {
                  "type": "boolean",
                  "default": true
                },
                "poolname": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "pooltype": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "ndevices": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dfab"
        ],
        "operationId": "pools_delete_list",
        "summary": "API to delete a list of pools",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "pools"
              ],
              "properties": {
                "pools": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pools/collection": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "pools_get_collection_all",
        "summary": "API to get all the pools.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PoolCollection"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pools/{pool}/collection": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "pools_get_collection_one",
        "summary": "API to get collection of single pool.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "pool",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/PoolCollection"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/nodes/collection": {
      "get": {
        "tags": [
          "dfab"
        ],
        "operationId": "nodes_get_all",
        "summary": "API to get collection of nodes.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "healthy": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/NodeCollection"
                      }
                    },
                    "unhealthy": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/NodeCollection"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/auth": {
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "change_auth",
        "summary": "API to change the current authorization mode.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AuthModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "get_auth",
        "summary": "API to fetch information about all authorization modes.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/AuthModel"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/storage/volumes": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "volumes_storage",
        "summary": "API to fetch information about storage.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "volumes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "dkube"
        ],
        "summary": "API to Get All Projects",
        "operationId": "get_all_projects",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ProjectListModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "projects_delete_list",
        "summary": "API to delete a list of projects",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "project_ids"
              ],
              "properties": {
                "project_ids": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "summary": "API to Get Single Project",
        "operationId": "get_one_project",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "required": true,
            "name": "project_id",
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ProjectModel"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "dkube"
        ],
        "summary": "API to update single Project",
        "description": "Update project",
        "operationId": "update_one_project",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "required": true,
            "name": "project_id",
            "in": "path",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectUpdateModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/projects/{project_id}/submissions": {
      "get": {
        "tags": [
          "dkube"
        ],
        "summary": "API to Get all submissions of a project",
        "operationId": "get_all_project_submissions",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "required": true,
            "name": "project_id",
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SubmissionModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/projects/{project_id}/{submission_id}": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "submit_project_metrics",
        "summary": "API to post submission for a project",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "submission_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "metrics": {
                  "title": "Metrics",
                  "type": "object",
                  "additionalProperties": true
                },
                "eval_run": {
                  "title": "Eval Run",
                  "type": "string"
                },
                "eval_run_name": {
                  "title": "Eval Run Name",
                  "type": "string"
                },
                "artifacts_url": {
                  "title": "URL of artifacts in storage",
                  "type": "string"
                },
                "experiment_name": {
                  "title": "Experiment Name",
                  "type": "string"
                },
                "pipeline_name": {
                  "title": "Pipeline Name",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/projects/create": {
      "post": {
        "tags": [
          "dkube"
        ],
        "summary": "API to Create a Project",
        "operationId": "create_project",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "title": "Name",
                  "type": "string"
                },
                "group": {
                  "title": "Group",
                  "type": "string"
                },
                "description": {
                  "title": "Description",
                  "type": "string"
                },
                "image": {
                  "title": "Image",
                  "maxLength": 2083,
                  "minLength": 1,
                  "type": "string"
                },
                "leaderboard": {
                  "title": "Leaderboard",
                  "type": "boolean",
                  "default": false
                },
                "feastEnabled": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ProjectModel"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migration": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "jobmigration",
        "summary": "API to migrate jobs",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "jobs"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "source_url": {
                  "type": "string"
                },
                "source_JWT": {
                  "type": "string"
                },
                "target_url": {
                  "type": "string"
                },
                "target_JWT": {
                  "type": "string"
                },
                "jobs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MigrationJobEntry"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/MigrationStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "migration_status_user",
        "summary": "API to send status of migration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/MigrationStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/abort": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "abort_migration",
        "summary": "API to terminate migration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/MigrationStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/delete": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_migration",
        "summary": "API to terminate migration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/meta": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_migration_metadata",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "API to export a single job.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "Data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MigrationJobEntry"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/target/init": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "target_migration_init",
        "summary": "API to initiate_migration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "upfile",
            "type": "file",
            "description": "The file to upload."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/MigrationStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/source/init": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "source_migration_init",
        "summary": "API to initiate_migration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MigrationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/MigrationStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/update": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "migration_status",
        "summary": "API to send status of migration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MigrationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/migrations/{migration}/complete": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "migration_complete",
        "summary": "API to notify migration complete",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "migration",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MigrationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/MigrationStatus"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/internal/notify/{type}/{op}": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "notification",
        "summary": "API to post notifications to Dkube API server",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the resource type that is notified about"
          },
          {
            "name": "op",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "add",
              "update",
              "delete"
            ],
            "description": "the operation type this notification carries"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NotificationData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pipelines/runs": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_pipeline_runs_all",
        "summary": "API to delete all pipeline runs",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pipelines/runs/{name}": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_pipeline_run",
        "summary": "API to delete a pipeline run",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "exp",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pipelines/runs/runid/{runid}": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_pipeline_run_by_id",
        "summary": "API to delete a pipeline run by id",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "runid",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pipelines/experiments": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_pipeline_experiments_all",
        "summary": "API to delete all pipeline experiments",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pipelines/experiments/{name}": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_pipeline_experiment",
        "summary": "API to delete a pipeline experiment",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/pipelines/experiments/expid/{expid}": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_pipeline_experiment)by_id",
        "summary": "API to delete a pipeline experiment by id",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "expid",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/model/deploy": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "model_deploy",
        "summary": "API to deploy model",
        "parameters": [
          {
            "name": "Data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "operator": {
                  "type": "string"
                },
                "event_data": {
                  "type": "object",
                  "properties": {
                    "resources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource_url": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/storage/volumes/export": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "storage_volume_export",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "Export the given artifacts as k8s volumes",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "description": "Unique id which relates all the volumes"
                },
                "kind": {
                  "type": "string",
                  "description": "Kind of volume to be exported",
                  "enum": [
                    "input",
                    "output",
                    "intermediate"
                  ]
                },
                "namespace": {
                  "type": "string",
                  "description": "K8S namespace in which these vols must be provided"
                },
                "volumes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ArtifactVolume"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/storage/volumes/reclaim": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "storage_volume_reclaim",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "summary": "Reclaims the volumes related to the unique ID",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string",
                  "description": "Unique id which relates all the volumes"
                },
                "namespace": {
                  "type": "string",
                  "description": "K8S namespace in which these vols are provided"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/images": {
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_cicd_images",
        "summary": "API to delete cicd images",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "images": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "add_cicd_image",
        "summary": "API to add new cicd image",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "image": {
                  "type": "string"
                },
                "private": {
                  "type": "boolean",
                  "default": false
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "registry": {
                  "type": "string"
                },
                "digest": {
                  "type": "string"
                },
                "repo": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "operationId": "get_all_cicd_images",
        "summary": "API to get all cicd images",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ImageModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/admin/featurestore": {
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "featurestore_put",
        "summary": "API to edit faturestore configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeatureStore"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "featurestore_get",
        "summary": "API to get featurestore configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/FeatureStore"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_add_one",
        "summary": "API to create a fatureset",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeatureSetInputDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_list",
        "summary": "API to list faturestores",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "versions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "tags",
            "in": "query",
            "type": "string"
          },
          {
            "name": "archived",
            "type": "boolean",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "featureset": {
                        "$ref": "#/definitions/FeatureSetDef"
                      },
                      "versions": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/FeatureSetVersionDef"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_delete",
        "summary": "API to delete a featureset",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "featuresets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_get",
        "summary": "API to get featureset configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "featureset": {
                      "$ref": "#/definitions/FeatureSetDef"
                    },
                    "featurespec": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/FeatureSpecDef"
                      }
                    },
                    "versions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "$ref": "#/definitions/FeatureSetVersionDef"
                          },
                          "jobs": {
                            "type": "array",
                            "description": "List of jobs used by featureset version",
                            "items": {
                              "$ref": "#/definitions/FeatureSetUsageDef"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_put",
        "summary": "API to update featureset configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "indexing",
            "type": "boolean",
            "in": "query",
            "required": false
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "description": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/FeatureSetDef"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}/featurespec": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "featurespec_list",
        "summary": "API to list featurespecs for a spec featureset",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeatureSpecDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "featurespec_put",
        "summary": "API to update featurespec",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "features": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string",
                        "minLength": 0,
                        "maxLength": 255
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/commit": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_commit_version",
        "summary": "API to commit all output faturesets",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeatureSetCommitDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}/version/{version}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_update_version",
        "summary": "API to update fatureset version",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "description": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}/versions/{version}/lineage": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_get_one_version_lineage",
        "summary": "API to get lineage of a featureset version",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "object",
                  "properties": {
                    "featureset": {
                      "$ref": "#/definitions/FeatureSetDef"
                    },
                    "version": {
                      "$ref": "#/definitions/FeatureSetVersionDef"
                    },
                    "run": {
                      "$ref": "#/definitions/JobModel"
                    },
                    "run_inputs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/FeaturesetLineageInOutModel"
                      }
                    },
                    "run_outputs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/FeaturesetLineageInOutModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/archive": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "featuresets_archive",
        "summary": "API to archive  or un-archive featuresets",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "archive",
            "in": "query",
            "type": "boolean",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "List of featuresets to archive",
            "schema": {
              "type": "object",
              "properties": {
                "featuresets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}/versions/{version}/copy": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_copy_version",
        "summary": "API to copy featureset version to users directory",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeaturesetVersionCopyDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}/versions/{version}/copyabort": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_copy_version_abort",
        "summary": "API to copy featureset version to users directory",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeaturesetVersionCopyDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/plugins": {
      "post": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "plugin_create_one",
        "summary": "API to create a plugin.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "Plugin to be created.",
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "arguments": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "component": {
                  "type": "string"
                },
                "container_image": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "plugins_list_all",
        "summary": "API to fetch list of all bundled and external plugins",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PluginModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "plugins_list_delete_by_name",
        "summary": "API to delete plugins by name",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "plugins"
              ],
              "properties": {
                "plugins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "List of plugins to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/plugins/{plugin}": {
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "plugin_upgrade_one",
        "summary": "API to upgrade a deployed plugin.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "plugin",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "Plugin to be upgraded.",
            "schema": {
              "type": "object",
              "properties": {
                "container_image": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "arguments": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featuresets/{featureset}/versions/{version}/copy_status": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "featureset_copy_version_status",
        "summary": "API to copy featureset version to users directory",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "featureset",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of modelmonitor"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeaturesetVersionCopyDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/DataCopy"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/smtpserver": {
      "put": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "upsert_smtp_artifact",
        "summary": "API to update smtp artifact.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "description": "Update SMTP Artifact.",
            "schema": {
              "$ref": "#/definitions/SmtpArtifact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "dkube-operator-exclusive"
        ],
        "operationId": "smtp_artifact_get",
        "summary": "API to fetch Artifact",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/SmtpArtifact"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/modelmonitors": {
      "post": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_add_one",
        "summary": "API to create a model monitor",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelmonitorDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_list",
        "summary": "API to list model monitors",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "shared",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "archived",
            "type": "boolean",
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ModelmonitorDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_delete",
        "summary": "API to delete modelmonitors",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "IDs of modelmonitor",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/ids": {
      "get": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_ids",
        "summary": "API to Get modelmonitor IDS",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitors",
            "in": "query",
            "required": true,
            "description": "Comma separated name of modelmonitors",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ModelmonitorNameIdMapDef"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/{modelmonitor}": {
      "get": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_get",
        "summary": "API to get modelmonitor configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "description": "ID of modelmonitor",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/ModelmonitorDef"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_update",
        "summary": "API to update modelmonitor configuration",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "required": true,
            "description": "ID of modelmonitor",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "input_data_type": {
                  "description": "training dataset type",
                  "type": "string",
                  "enum": [
                    "image",
                    "tabular"
                  ]
                },
                "dashboard_plugin": {
                  "additionalProperties": true,
                  "x-nullable": true
                },
                "thresholds": {
                  "additionalProperties": {
                    "$ref": "#/definitions/ModelmonitorThresholdDef"
                  }
                },
                "input_data_shape": {
                  "$ref": "#/definitions/ModelmonitorInputDataShapeDef"
                },
                "pipeline_thresholds": {
                  "$ref": "#/definitions/ModelmonitorThresholdDef"
                },
                "data_timezone": {
                  "type": "string"
                },
                "alerts": {
                  "type": "array",
                  "description": "model monitor alerts",
                  "items": {
                    "$ref": "#/definitions/ModelmonitorAlertDef"
                  }
                },
                "schema": {
                  "$ref": "#/definitions/ModelmonitorFeaturesSpecDef"
                },
                "model_type": {
                  "description": "Model prediction type - regression or classification",
                  "type": "string",
                  "enum": [
                    "regression",
                    "classification"
                  ]
                },
                "datasources": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/definitions/ModelmonitorDataSourceDef"
                  },
                  "example": {
                    "train": {
                      "id": "451bd2a5-993a-42a2-a78d-c104a3a418f5",
                      "name": "example:user",
                      "data_format": "tabular"
                    }
                  },
                  "description": "model monitor datasources"
                },
                "deployment_monitoring": {
                  "$ref": "#/definitions/DeploymentMonitoringDef"
                },
                "drift_monitoring": {
                  "$ref": "#/definitions/DriftMonitoringDef"
                },
                "performance_monitoring": {
                  "$ref": "#/definitions/PerformanceMonitoringDef"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/archive": {
      "put": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_archive",
        "summary": "API to archive modelmonitor",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "IDs of modelmonitor",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "name": "archive",
            "in": "query",
            "description": "Boolean status that depicts whether modelmonitor should be archived or unarchived",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/notifymm/{modelmonitor}": {
      "post": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_component_status",
        "summary": "API to Change Status of Pipeline Components",
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "description": "ID of modelmonitor",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/ModelmonitorComponentDef"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/{modelmonitor}/{state}": {
      "put": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_state",
        "summary": "API to start or stop modelmonitor",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "description": "ID of modelmonitor",
            "required": true,
            "type": "string"
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/{modelmonitor}/alert/{alert}": {
      "put": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_update_alert",
        "summary": "API to update modelmonitor alert",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "required": true,
            "description": "ID of modelmonitor",
            "type": "string"
          },
          {
            "name": "alert",
            "in": "path",
            "required": true,
            "description": "ID of Alert",
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "alert_action": {
                  "$ref": "#/definitions/ModelmonitorAlertActionDef"
                },
                "class": {
                  "type": "string"
                },
                "conditions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ModelmonitorAlertCondDef"
                  }
                },
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/{modelmonitor}/alerts": {
      "post": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_add_alerts",
        "summary": "API to add modelmonitor alerts",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "description": "ID of modelmonitor",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ModelmonitorAlertDef"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_delete_alerts",
        "summary": "API to delete modelmonitor alerts",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "IDs of modelmonitor alerts",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_alerts_list",
        "summary": "API to list alerts for a specific modelmonitor",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "description": "ID of modelmonitor",
            "required": true,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ModelmonitorAlertDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/{modelmonitor}/features": {
      "get": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_get_features",
        "summary": "API to get features from the training dataset. This is only valid for columnar data and returns the column names.",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "modelmonitor",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/modelmonitor/metrics_template": {
      "get": {
        "tags": [
          "modelmonitor"
        ],
        "operationId": "modelmonitor_get_metrics_template",
        "summary": "API to get metrics templates.\nEach template shows the list of metrics supported for a specific model category such as classification, regression etc.\n",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ModelmonitorApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ModelmonitorMetricsTemplateDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ModelmonitorApiError"
            }
          }
        }
      }
    },
    "/registry": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "get registry metadata of a project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "project": {
                  "type": "string"
                },
                "regblob": {
                  "type": "string"
                },
                "version": {
                  "type": "integer"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "delete registry details of project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegistryAPIResponseDef"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "update registry metadata for a project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeastRegistry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/RegistryAPIResponseDef"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/registry/validate": {
      "post": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "validate registry metadata for a project",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegistryValidate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InfraValidityAPIResponseDef"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/entities": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "list all the entities belong to a project",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "entities": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntityResponseDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/entities/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "name of entity"
          },
          {
            "in": "query",
            "name": "project",
            "required": true,
            "type": "string",
            "description": "project to which entity belong"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EntityResponseDef"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featureviews": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "list all the feature views belong to a project",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "featureviews": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeatureViewResponseDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featureviews/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "name of the featureview"
          },
          {
            "in": "query",
            "name": "project",
            "required": true,
            "type": "string",
            "description": "project to which featureview belong"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FeatureViewResponseDef"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/odfvs": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "list all the odfvs belong to a project",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "odfvs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/OdfvResponseModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/odfvs/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "name of odfvs"
          },
          {
            "in": "query",
            "name": "project",
            "required": true,
            "type": "string",
            "description": "project to which odfvs belong"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/OdfvResponseModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featureservices": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "list all the feature services belong to a project",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "featureservices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeatureServiceResponseDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/featureservices/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "name of featureservice"
          },
          {
            "in": "query",
            "name": "project",
            "required": true,
            "type": "string",
            "description": "project to which featureservice belong"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FeatureServiceResponseDef"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/datasources": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "list of all the data sources belong to a project",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "datasources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DatasourceResponseModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/datasources/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "name of the datasource"
          },
          {
            "in": "query",
            "name": "project",
            "required": true,
            "type": "string",
            "description": "project to which the datasource belong"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DatasourceResponseModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/sfvs": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "project",
            "description": "list all the sfvs belong to a project",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "user",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "sfvs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SfvResponseModel"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/sfvs/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "name of sfvs"
          },
          {
            "in": "query",
            "name": "project",
            "required": true,
            "type": "string",
            "description": "project to which sfvs belong"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SfvResponseModel"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/v2/deployments": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "list_deployments",
        "summary": "API to list all deployments",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "shared",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "tags",
            "in": "query",
            "type": "string"
          },
          {
            "name": "archived",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "name",
            "type": "string",
            "in": "query"
          },
          {
            "name": "prod",
            "type": "boolean",
            "in": "query"
          },
          {
            "name": "owner",
            "type": "string",
            "in": "query"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeploymentDef"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_deployments",
        "summary": "API to delete deployments",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deployment_ids": {
                  "description": "IDs of deployments",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/v2/deployments/archive": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "archive_deployments",
        "summary": "API to archive deployments",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "archive",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deployment_ids": {
                  "description": "IDs of deployments",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/v2/deployments/{id}": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_deployment",
        "summary": "API to get one deployment based on deployment id",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/DeploymentDef"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/v2/deployments/logstore": {
      "get": {
        "tags": [
          "dkube"
        ],
        "operationId": "get_cloudevents_logstore_creds",
        "summary": "API to get the credentials for cloudevents logs bucket",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "response": {
                  "$ref": "#/definitions/ApiResponse"
                },
                "data": {
                  "$ref": "#/definitions/S3AccessCredentials"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/v2/deployment/import": {
      "post": {
        "tags": [
          "dkube"
        ],
        "operationId": "import_new_deployment",
        "summary": "API to imployment new deployment",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentImportRequestDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    },
    "/v2/deployment/import/{id}": {
      "put": {
        "tags": [
          "dkube"
        ],
        "operationId": "update_deployment",
        "summary": "API to update new deployment",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentImportRequestDef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dkube"
        ],
        "operationId": "delete_deployment",
        "summary": "API to delete a deployment",
        "security": [
          {
            "d3apikey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "FeastRegistry": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "regblob": {
          "type": "string"
        },
        "to_add": {
          "$ref": "#/definitions/RegProperties"
        },
        "to_delete": {
          "$ref": "#/definitions/RegProperties"
        }
      }
    },
    "RegistryValidate": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "to_add": {
          "$ref": "#/definitions/RegProperties"
        },
        "to_delete": {
          "$ref": "#/definitions/RegProperties"
        }
      }
    },
    "FeaturePropertiesResponseDef": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EntitySchema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "data_type": {
            "type": "string"
          }
        }
      }
    },
    "OdfvSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "DatasourceSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "SfvSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "EntityResponseDef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "data_type": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "FeatureViewSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "FeatureViewResponseDef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "entities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "FeatureServiceSchema": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "FeatureServiceResponseDef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "OdfvResponseModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "DatasourceResponseModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "SfvResponseModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        }
      }
    },
    "RegProperties": {
      "type": "object",
      "properties": {
        "entities": {
          "$ref": "#/definitions/EntitySchema"
        },
        "feature_views": {
          "$ref": "#/definitions/FeatureViewSchema"
        },
        "odfvs": {
          "$ref": "#/definitions/OdfvSchema"
        },
        "sfvs": {
          "$ref": "#/definitions/SfvSchema"
        },
        "feature_services": {
          "$ref": "#/definitions/FeatureServiceSchema"
        },
        "datasources": {
          "$ref": "#/definitions/DatasourceSchema"
        }
      }
    },
    "RegistryAPIResponseDef": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InfraValidityAPIResponseDef": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      }
    },
    "RegPropertiesResponseDef": {
      "type": "object",
      "properties": {
        "userid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DeploymentImportRequestDef": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cluster": {
          "type": "string",
          "x-nullable": true
        },
        "deployment_url": {
          "type": "string"
        },
        "model_reference": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "variant": {
          "type": "string"
        }
      }
    },
    "DeploymentDef": {
      "type": "object",
      "description": "Deployment Definition",
      "properties": {
        "id": {
          "type": "string",
          "description": "uuid4 for the resource"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "string"
        },
        "user_group": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "archived": {
          "type": "boolean"
        },
        "inferenceservice_deployment": {
          "$ref": "#/definitions/JobModel"
        },
        "imported_deployment": {
          "$ref": "#/definitions/ExternalDeploymentDef"
        },
        "modelmonitor": {
          "$ref": "#/definitions/ModelmonitorDef"
        }
      }
    },
    "ExternalDeploymentDef": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "variant": {
          "type": "string"
        },
        "cluster": {
          "$ref": "#/definitions/Cluster"
        },
        "reference_model": {
          "type": "string"
        },
        "deployment_url": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "remote_deployment_id": {
          "type": "string"
        }
      }
    },
    "ModelmonitorMetricsTemplateDef": {
      "type": "object",
      "description": "Metrics templates",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID4 id for the resource"
        },
        "name": {
          "type": "string",
          "description": "Name of the template"
        },
        "category": {
          "type": "string",
          "description": "Model category for which metrics are defined. One of regression, classification."
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ModelmonitorMetricDef"
          },
          "example": {
            "rms": {
              "label": "Root Mean Square",
              "op_mode": "greaterthan",
              "value": "rms"
            }
          }
        }
      }
    },
    "ModelmonitorMetricDef": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "op_mode": {
          "type": "string"
        }
      }
    },
    "ModelmonitorComponentDef": {
      "type": "object",
      "description": "Pipeline Component Associated with a monitor",
      "properties": {
        "run_id": {
          "type": "string",
          "description": "Unique id of the run component"
        },
        "status_info": {
          "type": "string",
          "description": "JSON Blob"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "baseline",
            "data_drift",
            "performance_drift",
            "deployment_health"
          ]
        }
      }
    },
    "ModelmonitorStatusDef": {
      "type": "object",
      "description": "Embedded Status Schema",
      "properties": {
        "state": {
          "type": "string"
        },
        "sub_state": {
          "minLength": 1,
          "maxLength": 255,
          "type": "string",
          "description": "Sub state of resource"
        },
        "message": {
          "type": "string"
        },
        "code": {
          "minLength": 1,
          "maxLength": 255,
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "schema_updated": {
          "type": "boolean"
        },
        "alerts_updated": {
          "type": "boolean"
        },
        "deploy_logs_status": {
          "type": "boolean"
        }
      }
    },
    "ModelmonitorFeaturesSpecDef": {
      "type": "object",
      "description": "Schema associated with a modelmonitor",
      "properties": {
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelmonitorSchemaFeature"
          }
        },
        "invalid_alerts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ModelmonitorSchemaFeature": {
      "type": "object",
      "properties": {
        "selected": {
          "type": "boolean"
        },
        "class": {
          "type": "string",
          "enum": [
            "categorical",
            "continuous"
          ]
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "input_feature",
            "prediction_output",
            "timestamp",
            "row_id",
            "null"
          ]
        }
      }
    },
    "DriftMonitoringDef": {
      "type": "object",
      "description": "Drift Monitoring associated to a monitor",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "frequency": {
          "description": "frequency in minutes, minimum 5 minutes",
          "type": "integer",
          "format": "int64"
        },
        "image_train_data_savedfile_format": {
          "type": "string",
          "description": "Describe how the train datasource is organized - bin_numpy_array             : binary numpy array - img_files_labels_csv        : image files, and labels in csv - images_in_labelled_folder   : directory name same as labels",
          "enum": [
            "bin_numpy_array",
            "img_files_labels_csv",
            "images_in_labelled_folder"
          ]
        },
        "image_predict_data_savedfile_format": {
          "description": "Describe how the predict datasource is organized - bin_numpy_array             : binary numpy array - img_files_labels_csv        : image files, and labels in csv - images_in_labelled_folder   : directory name same as labels",
          "enum": [
            "bin_numpy_array",
            "img_files_labels_csv",
            "images_in_labelled_folder"
          ]
        },
        "algorithm": {
          "type": "string",
          "enum": [
            "auto",
            "kolmogorov-smirnov",
            "chi squared",
            "kolmogorov-smirnov & chi squared"
          ]
        }
      }
    },
    "PerformanceMonitoringDef": {
      "type": "object",
      "description": "Performance Monitoring associated to a monitor",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "frequency": {
          "description": "frequency in minutes, minimum 5 minutes",
          "type": "integer",
          "format": "int64"
        },
        "row_id": {
          "description": "required in case of modelmonitor.input_data_type is image",
          "type": "string"
        },
        "prediction_timestamp_col_name": {
          "type": "string"
        },
        "source_type": {
          "type": "string",
          "enum": [
            "labelled_data",
            "metrics",
            "custom"
          ]
        },
        "docker_image": {
          "type": "string"
        },
        "startup_script": {
          "type": "string"
        }
      }
    },
    "ModelmonitorThresholdDef": {
      "type": "object",
      "required": [
        "type",
        "soft",
        "hard"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "health",
            "drift",
            "performance"
          ]
        },
        "baseline": {
          "type": "number",
          "format": "float"
        },
        "soft": {
          "type": "number",
          "format": "float"
        },
        "hard": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "DeploymentMonitoringDef": {
      "type": "object",
      "description": "Deployment Monitoring associated to a monitor",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "frequency": {
          "description": "frequency in minutes, minimum 5 minutes",
          "type": "integer",
          "format": "int64"
        },
        "metrics": {
          "$ref": "#/definitions/ModelmonitorHeartbeatDef"
        },
        "collect_metrics": {
          "type": "boolean"
        }
      }
    },
    "ModelmonitorHeartbeatDef": {
      "type": "object",
      "description": "metric source definition",
      "properties": {
        "heartbeat": {
          "type": "boolean"
        },
        "protocol": {
          "type": "string",
          "enum": [
            "tcp",
            "http"
          ]
        },
        "payload": {
          "type": "string"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "response_status_code": {
          "type": "string"
        },
        "response_body": {
          "type": "string"
        }
      }
    },
    "ModelmonitorAlertActionDef": {
      "type": "object",
      "description": "action to be taken on if threshold is breached",
      "properties": {
        "emails": {
          "type": "string",
          "description": "comma separated emails"
        },
        "breach_threshold": {
          "type": "integer",
          "maximum": 7
        },
        "action_type": {
          "type": "string",
          "enum": [
            "email"
          ],
          "default": "email"
        },
        "additional_subject": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "ModelmonitorDef": {
      "type": "object",
      "description": "Schema for a Modelmonitor",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID4 id for the resource"
        },
        "data_timezone": {
          "type": "string"
        },
        "dashboard_plugin": {
          "additionalProperties": true
        },
        "status": {
          "$ref": "#/definitions/ModelmonitorStatusDef"
        },
        "schema": {
          "$ref": "#/definitions/ModelmonitorFeaturesSpecDef"
        },
        "pipeline_component": {
          "$ref": "#/definitions/ModelmonitorComponentDef"
        },
        "deployment_monitoring": {
          "$ref": "#/definitions/DeploymentMonitoringDef"
        },
        "drift_monitoring": {
          "$ref": "#/definitions/DriftMonitoringDef"
        },
        "performance_monitoring": {
          "$ref": "#/definitions/PerformanceMonitoringDef"
        },
        "pipeline_threshold": {
          "$ref": "#/definitions/ModelmonitorThresholdDef"
        },
        "thresholds": {
          "additionalProperties": {
            "$ref": "#/definitions/ModelmonitorThresholdDef"
          }
        },
        "owner": {
          "type": "string",
          "description": "owner name of modelmonitor"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "model_type": {
          "description": "Model prediction type - regression or classification",
          "type": "string",
          "enum": [
            "regression",
            "classification"
          ]
        },
        "input_data_type": {
          "description": "training dataset type",
          "type": "string",
          "enum": [
            "image",
            "tabular"
          ]
        },
        "input_data_shape": {
          "$ref": "#/definitions/ModelmonitorInputDataShapeDef"
        },
        "datasources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ModelmonitorDataSourceDef"
          },
          "example": {
            "train": {
              "id": "451bd2a5-993a-42a2-a78d-c104a3a418f5",
              "name": "example:user",
              "data_format": "tabular"
            }
          },
          "description": "model monitor datasources"
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "alerts": {
          "type": "array",
          "description": "model monitor alerts",
          "items": {
            "$ref": "#/definitions/ModelmonitorAlertDef"
          }
        }
      }
    },
    "ModelmonitorDataSourceDef": {
      "type": "object",
      "description": "Schema for model monitor datasets",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID4 id for the resource"
        },
        "class": {
          "type": "string",
          "enum": [
            "labelled",
            "metrics",
            "predict",
            "train"
          ]
        },
        "transformer_script": {
          "type": "string",
          "description": "Transformer Script for Preprocessing and Postprocessing for Train and Predict Data"
        },
        "name": {
          "type": "string",
          "description": "dkube dataset name",
          "minLength": 1,
          "maxLength": 255
        },
        "timezone": {
          "type": "string"
        },
        "timestamp_col": {
          "type": "string"
        },
        "sql_query": {
          "type": "string"
        },
        "s3_subpath": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "dkube dataset version"
        },
        "data_format": {
          "type": "string",
          "description": "The format of the dataset",
          "enum": [
            "tabular",
            "cloudeventlogs",
            "sagemakerlogs",
            "image"
          ],
          "default": "tabular"
        },
        "groundtruth_col": {
          "type": "string",
          "description": "Ground truth column name in labelled dataset"
        },
        "predict_col": {
          "type": "string",
          "description": "Predict column name in train dataset"
        },
        "image_transformation": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "standardisation",
              "normalization",
              "scaling"
            ]
          }
        },
        "date_suffix": {
          "default": "none",
          "type": "string",
          "enum": [
            "yyyy/mm/dd/hh",
            "yyyy/mm/dd",
            "yyyy/mm",
            "none"
          ],
          "description": "In case of datasource to be tabular and your datasource is arranged in the\n directory structure of time fashion you can select either of the option\nyyyy/mm/dd/hh - in case of datsource is arranged in year/month/date/hour format yyyy/mm/dd    - in case of datsource is arranged in year/month/date format yyyy/mm       - in case of datsource is arranged in year/month format \"none\"        - in case data has no arranged fashion"
        }
      }
    },
    "ModelmonitorAlertStatusDef": {
      "type": "object",
      "description": "Modelmonitor Alert Status",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "enabled",
            "disabled",
            "invalid"
          ]
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ModelmonitorAlertDef": {
      "type": "object",
      "description": "Schema for monitor alerts",
      "properties": {
        "id": {
          "type": "string",
          "description": "UUID4 id for the resource"
        },
        "class": {
          "type": "string",
          "enum": [
            "feature_drift",
            "performance_decay",
            "deployment_health"
          ],
          "default": "feature_drift"
        },
        "enabled": {
          "type": "boolean",
          "description": "To signify alert is enabled or disabled"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "type": "array",
          "description": "All conditions need to satisfy for the alarm to fire",
          "items": {
            "$ref": "#/definitions/ModelmonitorAlertCondDef"
          }
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ModelmonitorAlertStatusDef"
        },
        "alert_action": {
          "$ref": "#/definitions/ModelmonitorAlertActionDef"
        }
      },
      "required": [
        "class",
        "conditions",
        "name"
      ]
    },
    "ModelmonitorInputDataShapeDef": {
      "type": "object",
      "properties": {
        "height": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "channel": {
          "description": "The colour spaces used by the image dataset. - 0 for no channel - 1 for 1 channel (grayscale) - 3 for 3 channel (for eg rgb, hsv etc) - 4 for 4 channel (for eg cmyk etc)",
          "type": "number",
          "enum": [
            0,
            1,
            3,
            4
          ],
          "default": 0
        },
        "channel_order": {
          "type": "string",
          "enum": [
            "last",
            "first"
          ]
        }
      }
    },
    "ModelmonitorNameIdMapDef": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "modelmonitor-1": "bcc53ccf-056c-4482-abe7-233bde7f58d6",
        "modelmonitor-2": "e8e4efbd-a97c-406f-8f72-439331d25fba"
      }
    },
    "ModelmonitorAlertCondDef": {
      "type": "object",
      "description": "Schema for model monitor alert condition",
      "properties": {
        "feature": {
          "type": "string"
        },
        "metric": {
          "type": "string"
        },
        "op": {
          "type": "string",
          "x-nullable": true,
          "default": ">"
        },
        "threshold": {
          "x-nullable": true,
          "type": "number",
          "format": "float"
        },
        "state": {
          "type": "string",
          "x-nullable": true,
          "enum": [
            "warning",
            "critical"
          ]
        }
      }
    },
    "PluginModel": {
      "type": "object",
      "description": "Schema for an external plugin.",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "component": {
          "type": "string"
        },
        "container_image": {
          "type": "string"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "description": "Following values will be autogenerated by dkube.",
          "properties": {
            "uuid": {
              "type": "string"
            },
            "user": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/PluginStatusModel"
            },
            "timestamps": {
              "$ref": "#/definitions/TimeStamps"
            },
            "service_name": {
              "type": "string"
            },
            "service_port": {
              "type": "string"
            }
          }
        }
      }
    },
    "PluginStatusModel": {
      "type": "object",
      "description": "Schema for a plugin status",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "READY",
            "FAILED",
            "STOPPED",
            "CREATING"
          ]
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "ArtifactVolume": {
      "type": "object",
      "description": "Definition of PV for a dkube artifact",
      "properties": {
        "name": {
          "type": "string"
        },
        "artifact_type": {
          "type": "string",
          "enum": [
            "dataset",
            "program",
            "model",
            "featureset"
          ]
        },
        "artifact_name": {
          "type": "string"
        },
        "artifact_version": {
          "type": "string"
        }
      }
    },
    "AuthModel": {
      "type": "object",
      "description": "Schema for an authorization mode in dkube.",
      "required": [
        "mode"
      ],
      "properties": {
        "mode": {
          "type": "string",
          "description": "The authorization mode to switch to.",
          "enum": [
            "github",
            "local",
            "ldap",
            "keycloak"
          ]
        },
        "code": {
          "type": "string",
          "description": "Code provided by Dex that can be exchanged with it to receive JWT token."
        },
        "providers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The modes of authorization that supports changing to from operator dashboard."
        },
        "ldap": {
          "type": "object",
          "description": "LDAP.",
          "properties": {
            "username": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Name of the valid user. This user must be present in LDAP server."
            },
            "password": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Password of the user."
            },
            "basedn": {
              "type": "string",
              "description": "LDAP BaseDN."
            },
            "cacert": {
              "$ref": "#/definitions/CertFileModel"
            },
            "scope": {
              "type": "string",
              "description": "Search scope",
              "enum": [
                "base",
                "singlelevel",
                "wholesubtree"
              ]
            },
            "userAttr": {
              "type": "string",
              "description": "Search scope"
            },
            "groupAttr": {
              "type": "string",
              "description": "Search scope"
            },
            "groupFilter": {
              "type": "string",
              "description": "Optional LDAP group search filter"
            },
            "userFilter": {
              "type": "string",
              "description": "Optional LDAP user search filter"
            },
            "binddn": {
              "type": "string",
              "description": "LDAP BindDN."
            },
            "endpoint": {
              "type": "string",
              "description": "AD IP Address without protocol and port."
            },
            "advanced": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "dataProfile": {
                  "type": "string"
                },
                "superuserProfile": {
                  "type": "string"
                }
              }
            },
            "updatedAt": {
              "type": "string",
              "format": "YYYY:MM:DD HH:MM:SS",
              "description": "Time at which this provider was migrated to."
            }
          }
        },
        "github": {
          "type": "object",
          "description": "Github info required to onboard an operator.",
          "properties": {
            "username": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Name of the valid user. This user should be a github user and must have admin priviliges."
            },
            "organization": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Git organization of which this user is admin. All the members of organization will auto imported as part of init. They will just be created and not onboarded. Such users still do not have access to Dkube APIs. This user with operator role would need to onboard the user explicitly."
            },
            "token": {
              "type": "string",
              "description": "Github token with admin priviliges.",
              "minLength": 1
            },
            "code": {
              "type": "string",
              "description": "Github session code for generating access_token.",
              "minLength": 1,
              "maxLength": 255
            },
            "clientId": {
              "type": "string",
              "description": "Github App client id.",
              "minLength": 1,
              "maxLength": 255
            },
            "clientSecret": {
              "type": "string",
              "description": "Github App client secret.",
              "minLength": 1,
              "maxLength": 255
            },
            "updatedAt": {
              "type": "string",
              "format": "YYYY:MM:DD HH:MM:SS",
              "description": "Time at which this provider was migrated to."
            }
          }
        },
        "keycloak": {
          "type": "object",
          "description": "Keycloak info required to onboard an operator.",
          "properties": {
            "username": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Name of the valid user. This user should be a keycloak user and must have admin priviliges."
            },
            "realm": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "endpoint": {
              "type": "string",
              "description": "Keycloak server's IP Address with scheme and port."
            },
            "redirectURI": {
              "type": "string",
              "description": "redirect uri for keycloak server"
            },
            "clientId": {
              "type": "string",
              "description": "Keycloak App client id.",
              "minLength": 1,
              "maxLength": 255
            },
            "clientSecret": {
              "type": "string",
              "description": "Keycloak App client secret.",
              "minLength": 1,
              "maxLength": 255
            },
            "updatedAt": {
              "type": "string",
              "format": "YYYY:MM:DD HH:MM:SS",
              "description": "Time at which this provider was migrated to."
            }
          }
        },
        "local": {
          "type": "object",
          "description": "Username/password combo required to onboard an operator.",
          "required": [
            "username",
            "password"
          ],
          "properties": {
            "username": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Username of the operator."
            },
            "password": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "description": "Password of the operator."
            }
          }
        }
      }
    },
    "UserProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique name of the profile"
        },
        "uid": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "homedir": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              }
            }
          }
        },
        "shareddir": {
          "type": "string"
        },
        "extra_mounts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limits": {
          "type": "object",
          "properties": {
            "cpus": {
              "type": "string"
            },
            "mem": {
              "type": "string"
            },
            "gpus": {
              "type": "integer"
            }
          }
        },
        "fsx_profile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FsxProfile"
          }
        }
      }
    },
    "FsxProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dnsname": {
          "type": "string"
        },
        "mountname": {
          "type": "string"
        },
        "volumehandle": {
          "type": "string"
        }
      }
    },
    "RunGroupModel": {
      "type": "object",
      "description": "Schema for a run group",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "RepoModel": {
      "type": "object",
      "description": "Schema for a datum (Model/Program/Dataset)",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "gitaccess": {
          "$ref": "#/definitions/GitAccessCredentials"
        },
        "s3access": {
          "$ref": "#/definitions/RepoS3AccessCredentials"
        },
        "k8svolume": {
          "$ref": "#/definitions/K8SVolumeInfo"
        },
        "nfsaccess": {
          "$ref": "#/definitions/NFSAccessInfo"
        },
        "gcsaccess": {
          "$ref": "#/definitions/RepoGCSAccessInfo"
        },
        "redshift": {
          "$ref": "#/definitions/RedshiftAccessInfo"
        },
        "sql": {
          "$ref": "#/definitions/SQLAccessInfo"
        }
      }
    },
    "RepoS3AccessCredentials": {
      "type": "object",
      "properties": {
        "AccessKeyId": {
          "type": "string"
        },
        "AccessKey": {
          "type": "string"
        }
      }
    },
    "K8SVolumeInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        }
      }
    },
    "RepoGCSAccessInfo": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "object",
          "description": "Secret file in json format",
          "properties": {
            "name": {
              "type": "string",
              "description": "Secret file name"
            },
            "content": {
              "type": "string",
              "description": "Secret file content"
            }
          }
        }
      }
    },
    "RunTemplateModel": {
      "type": "object",
      "description": "Schema for a Job in dkube.",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "gpu_allocation": {
              "$ref": "#/definitions/Gpu_allocation"
            },
            "priority": {
              "type": "object",
              "properties": {
                "donot_queue": {
                  "type": "string"
                }
              }
            },
            "training": {
              "$ref": "#/definitions/DSJobModel",
              "description": "Training job related inputs. Should be provided if choice is training job."
            },
            "preprocessing": {
              "$ref": "#/definitions/PreprocessingJobModel",
              "description": "Data processing job related inputs."
            }
          }
        }
      }
    },
    "UserModel": {
      "type": "object",
      "description": "Schema for dkube user",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "role": {
          "type": "string",
          "enum": [
            "operator",
            "datascientist"
          ]
        },
        "created_at": {
          "$ref": "#/definitions/TimeStamps"
        },
        "status": {
          "type": "string",
          "enum": [
            "onboarding",
            "onboarded"
          ]
        },
        "default_group": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "generated": {
          "type": "object",
          "description": "These fields are generated by backend.",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        }
      }
    },
    "LastUsedCredentials": {
      "description": "Schema to store last used git credentials of datum",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "credentials": {
            "$ref": "#/definitions/GitAccessCredentials"
          }
        }
      }
    },
    "GitAccessCredentials": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "apikey": {
          "type": "string"
        },
        "sshkey": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "S3AccessCredentials": {
      "type": "object",
      "properties": {
        "AccessKeyId": {
          "type": "string"
        },
        "AccessKey": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        }
      }
    },
    "TimeStamps": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "end": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "duration": {
          "type": "object",
          "properties": {
            "days": {
              "type": "string"
            },
            "hours": {
              "type": "string"
            },
            "minutes": {
              "type": "string"
            },
            "seconds": {
              "type": "string"
            }
          }
        }
      }
    },
    "Tensor": {
      "type": "object",
      "description": "Schema of a tensor of a model.",
      "properties": {
        "dtype": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tensor_shape": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "DatumSourceDetails": {
      "type": "object",
      "description": "Schema for details of owner of a datum",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "dkube_generated",
            "dkube_referenced"
          ]
        },
        "job": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the job that generated this datum."
            },
            "jobid": {
              "type": "string",
              "description": "Jobid of job that generated this datum."
            }
          }
        }
      }
    },
    "DatumJobDetails": {
      "type": "object",
      "description": "Schema for details of owner of a datum",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the job that uses the datum."
        },
        "user": {
          "type": "string",
          "description": "User to which this job belongs."
        },
        "jobid": {
          "type": "string",
          "description": "Jobid of job that uses the datum."
        },
        "class": {
          "type": "string",
          "description": "Class of job that uses the datum."
        },
        "state": {
          "type": "string",
          "description": "State of the job"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pipeline": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "runid": {
              "type": "string"
            }
          }
        }
      }
    },
    "ReleasedModelItem": {
      "description": "Struct defining a single item in ReleasedModelItem",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        },
        "trackingURL": {
          "type": "string"
        },
        "UUID": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "releasedTimestamp": {
          "$ref": "#/definitions/TimeStamps"
        }
      }
    },
    "ReleasedModels": {
      "description": "Schema for Released models",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ReleasedModelItem"
      }
    },
    "ModelServingInfo": {
      "description": "Struct defining a serving info for a model",
      "type": "object",
      "properties": {
        "images": {
          "type": "object",
          "properties": {
            "serving": {
              "$ref": "#/definitions/CustomContainerModel"
            },
            "transformer": {
              "$ref": "#/definitions/CustomContainerModel"
            }
          }
        },
        "transformer_code": {
          "type": "object",
          "properties": {
            "repo": {
              "type": "string"
            },
            "commit": {
              "type": "string"
            },
            "transformer_code": {
              "type": "string"
            },
            "project": {
              "type": "string"
            }
          }
        }
      }
    },
    "ModelTrainingInfo": {
      "description": "Struct defining a training info for a model",
      "type": "object",
      "properties": {
        "images": {
          "type": "object",
          "properties": {
            "training": {
              "type": "string"
            }
          }
        },
        "training_code": {
          "type": "object",
          "properties": {
            "repo": {
              "type": "string"
            },
            "commit": {
              "type": "string"
            },
            "project": {
              "type": "string"
            }
          }
        },
        "datasets": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "source_details": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                }
              }
            }
          }
        },
        "featuresets": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ModelCatalogItemVersion": {
      "description": "Struct defining a version of a model in ModelCatalogItem",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "model": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          }
        },
        "serving": {
          "$ref": "#/definitions/ModelServingInfo"
        },
        "training": {
          "$ref": "#/definitions/ModelTrainingInfo"
        },
        "stage": {
          "type": "string"
        },
        "staged": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "publishedTimestamp": {
          "$ref": "#/definitions/TimeStamps"
        }
      }
    },
    "ModelCatalogItem": {
      "description": "Struct defining a single item in ModelCatalog",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        },
        "model": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            }
          }
        },
        "updateTimestamp": {
          "$ref": "#/definitions/TimeStamps"
        },
        "publisher": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelCatalogItemVersion"
          }
        }
      }
    },
    "ModelCatalog": {
      "description": "Schema for model catalog",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModelCatalogItem"
      }
    },
    "ModelDetails": {
      "type": "object",
      "description": "Schema for details of a model",
      "properties": {
        "kind": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string",
              "enum": [
                "dkube_trained",
                "downloaded"
              ]
            },
            "dkube_trained": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "string",
                  "description": "Name of the job which generated this model."
                }
              }
            }
          }
        },
        "format": {
          "type": "string",
          "enum": [
            "tensorpb",
            "unsupported"
          ]
        },
        "unsupported": {
          "type": "object",
          "properties": {
            "reason": {
              "type": "string"
            }
          }
        },
        "tensorpb": {
          "type": "object",
          "properties": {
            "signatures": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "properties": {
                "name": {
                  "type": "string"
                },
                "method": {
                  "type": "string"
                },
                "inputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tensor"
                  }
                },
                "outputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Tensor"
                  }
                }
              }
            },
            "devicenodes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "devices": {
              "type": "object",
              "properties": {
                "cpu": {
                  "type": "boolean",
                  "default": false
                },
                "gpu": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "parameters": {
              "type": "integer"
            },
            "weights": {
              "type": "integer"
            },
            "layers": {
              "type": "integer"
            },
            "servable": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "GitCommitDetails": {
      "type": "object",
      "description": "Schema for details of a program",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "GitDetails": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "boolean",
          "default": false,
          "description": "Set to true if the git URL points to a git repo."
        },
        "repodetails": {
          "type": "object",
          "description": "Will be empty when repo is False",
          "properties": {
            "branches": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "commits": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GitCommitDetails"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "NFSAccessInfo": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "RedshiftAccessInfo": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Redshift endpoint to connect to. Should be with protocol, host and port."
        },
        "username": {
          "type": "string",
          "description": "User authorized to connect to database."
        },
        "password": {
          "type": "string",
          "description": "Password to be used to connect to redshift."
        },
        "database": {
          "type": "string",
          "description": "Database in the redshift that this dataset should point to."
        },
        "region": {
          "type": "string",
          "description": "Region where this database resides."
        },
        "cacert": {
          "$ref": "#/definitions/CertFileModel",
          "description": "Certificate to be used while connecting to redshift."
        },
        "insecureSSL": {
          "type": "boolean"
        }
      }
    },
    "SQLAccessInfo": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string",
          "description": "User authorized to connect to the database."
        },
        "password": {
          "type": "string",
          "description": "Password to be used to connect to the database."
        },
        "database": {
          "type": "string",
          "description": "Database that this dataset should point to."
        },
        "ODBCConnectionString": {
          "type": "string"
        },
        "JDBCConnectionString": {
          "type": "string"
        },
        "cacert": {
          "$ref": "#/definitions/CertFileModel",
          "description": "Optional certificate to be used while connecting to the DB."
        },
        "provider": {
          "type": "string",
          "description": "DB provider (MYSQL/MSSQL/ORACLE)"
        }
      }
    },
    "GitAccessInfo": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "credentials": {
          "$ref": "#/definitions/GitAccessCredentials"
        }
      }
    },
    "GCSAccessInfo": {
      "type": "object",
      "properties": {
        "bucket": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "secret": {
          "type": "object",
          "description": "Secret file in json format",
          "properties": {
            "name": {
              "type": "string",
              "description": "Secret file name"
            },
            "content": {
              "type": "string",
              "description": "Secret file content"
            }
          }
        }
      }
    },
    "Fsx": {
      "type": "object",
      "properties": {
        "dnsname": {
          "type": "string"
        },
        "volumehandle": {
          "type": "string"
        },
        "mountname": {
          "type": "string"
        }
      }
    },
    "DatumStatusModel": {
      "type": "object",
      "description": "Schema for a datum status",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "DOWNLOADING",
            "READY",
            "FAILED",
            "STOPPING",
            "STOPPED",
            "UPLOADING",
            "CREATING",
            "QUEUED",
            "EXTRACTING"
          ]
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "JobGroupModel": {
      "type": "object",
      "description": "Schema for a job group",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "description": "Following values will be autogenerated by dkube.",
          "properties": {
            "uuid": {
              "type": "string"
            },
            "created_time": {
              "$ref": "#/definitions/TimeStamps"
            }
          }
        },
        "user": {
          "type": "string"
        }
      }
    },
    "DatumModel": {
      "type": "object",
      "description": "Schema for a datum (Model/Program/Dataset)",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "class": {
          "type": "string",
          "enum": [
            "model",
            "dataset",
            "program"
          ]
        },
        "group": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "dvs": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "description": "Enum of supported sources. git - If the datum is in github repo, aws-s3 - If the datum is in aws_s3 bucket, pub_url - If the datum is accessible over a public url, s3 - If datum is in any other s3 storage say like storage provided by minio, dkube - If datum is in dkube s3 storage itself",
          "enum": [
            "git",
            "aws_s3",
            "s3",
            "pub_url",
            "k8s_volume",
            "dkube",
            "nfs",
            "gcs",
            "dvs",
            "workstation",
            "redshift",
            "hostpath",
            "sql",
            "fsx"
          ]
        },
        "url": {
          "type": "string",
          "description": "Actual URL to download/access from based on the source."
        },
        "remote": {
          "type": "boolean",
          "description": "Set to 'true' if datum should not be downloaded and only accessed remotely. Say data in AWS S3 bucket which can be mounted and accessed.",
          "default": false
        },
        "gitaccess": {
          "$ref": "#/definitions/GitAccessInfo"
        },
        "redshift": {
          "$ref": "#/definitions/RedshiftAccessInfo"
        },
        "sql": {
          "$ref": "#/definitions/SQLAccessInfo"
        },
        "s3access": {
          "$ref": "#/definitions/S3AccessCredentials"
        },
        "k8svolume": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        },
        "hostpath": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          }
        },
        "nfsaccess": {
          "$ref": "#/definitions/NFSAccessInfo"
        },
        "gcsaccess": {
          "$ref": "#/definitions/GCSAccessInfo"
        },
        "fsx": {
          "$ref": "#/definitions/Fsx"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "description": "Following values will be autogenerated by dkube.",
          "properties": {
            "deleted": {
              "type": "boolean",
              "default": false
            },
            "archived": {
              "type": "boolean",
              "default": false
            },
            "extract": {
              "type": "boolean"
            },
            "originalName": {
              "type": "string"
            },
            "private": {
              "type": "string"
            },
            "head_version_index": {
              "type": "integer"
            },
            "head_version": {
              "type": "string"
            },
            "updated_time": {
              "$ref": "#/definitions/TimeStamps"
            },
            "storage_path": {
              "type": "string",
              "description": "Local path of datum stored in dkube storage"
            },
            "affinity": {
              "type": "string",
              "description": "Affinity of this datum."
            },
            "uuid": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/DatumStatusModel"
            },
            "refresh_status": {
              "$ref": "#/definitions/DatumStatusModel"
            },
            "size": {
              "type": "string",
              "description": "Size in bytes"
            },
            "progress": {
              "type": "integer",
              "description": "Progress in percentage"
            },
            "timestamps": {
              "$ref": "#/definitions/TimeStamps"
            },
            "tbref": {
              "type": "string"
            },
            "user": {
              "type": "string",
              "description": "user to which this datum belongs"
            },
            "details": {
              "type": "object",
              "properties": {
                "git": {
                  "$ref": "#/definitions/GitDetails"
                },
                "model": {
                  "$ref": "#/definitions/ModelDetails"
                },
                "tensorboard": {
                  "$ref": "#/definitions/TensorboardModel"
                },
                "source": {
                  "$ref": "#/definitions/DatumSourceDetails"
                }
              }
            }
          }
        }
      }
    },
    "VersionDetails": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/ModelDetails"
        }
      }
    },
    "DVSModel": {
      "type": "object",
      "description": "Schema for configuring dkube version management system",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "properties": {
            "state": {
              "type": "string",
              "enum": [
                "CREATING",
                "CREATED",
                "FAILED"
              ]
            },
            "reason": {
              "type": "string"
            }
          }
        },
        "metadata": {
          "type": "string",
          "enum": [
            "dkube",
            "git"
          ]
        },
        "store": {
          "type": "string",
          "enum": [
            "dkube",
            "s3",
            "gcs"
          ]
        },
        "git": {
          "type": "object",
          "properties": {
            "repo": {
              "type": "string"
            },
            "token": {
              "type": "string"
            }
          }
        },
        "s3": {
          "type": "object",
          "properties": {
            "secretkey": {
              "type": "string"
            },
            "secretid": {
              "type": "string"
            },
            "bucket": {
              "type": "string"
            }
          }
        },
        "gcs": {
          "type": "object",
          "properties": {
            "bucket": {
              "type": "string"
            },
            "secret": {
              "type": "string",
              "description": "JSON string of google service account"
            }
          }
        }
      }
    },
    "VersionModel": {
      "type": "object",
      "description": "Schema for version of a dataset/model",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the version given by user"
        },
        "uuid": {
          "type": "string",
          "description": "Unique id generated by system (timestamp in milliseconds)"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique tags provided by user"
        },
        "description": {
          "type": "string",
          "description": "User defined description for the version"
        },
        "index": {
          "type": "integer",
          "description": "Incremental index to sort"
        },
        "timestamps": {
          "$ref": "#/definitions/TimeStamps"
        },
        "syncState": {
          "type": "string",
          "description": "State of syncing data from cache to remote"
        },
        "storagePath": {
          "type": "string",
          "description": "Path at which the data of this version is"
        },
        "user": {
          "type": "string",
          "description": "Name of the owner"
        },
        "datumName": {
          "type": "string",
          "description": "Name of the datum"
        },
        "datumUUID": {
          "type": "string",
          "description": "UUID of dataset/model."
        },
        "runUUID": {
          "type": "string",
          "description": "UUID of run."
        },
        "trackingUUID": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "description": "Size in bytes"
        },
        "datumType": {
          "type": "string",
          "enum": [
            "model",
            "dataset",
            "program"
          ]
        },
        "model": {
          "type": "object",
          "properties": {
            "releasedTimestamp": {
              "$ref": "#/definitions/TimeStamps"
            },
            "publishedTimestamp": {
              "$ref": "#/definitions/TimeStamps"
            },
            "publishedName": {
              "type": "string"
            },
            "publishedDescription": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "stage": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "RELEASED",
                "PUBLISHING",
                "PUBLISHED",
                "DEPLOYED",
                "STAGED"
              ]
            }
          }
        }
      }
    },
    "ProjectStatusModel": {
      "type": "object",
      "description": "Status of a project",
      "properties": {
        "state": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "JobStatusModel": {
      "type": "object",
      "description": "Possible states of a run",
      "properties": {
        "sub_state": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "enum": [
            "QUEUED",
            "STARTING",
            "TRAINING",
            "RUNNING",
            "COMPLETE",
            "STOPPED",
            "STOPPING",
            "DELETING",
            "DELETED",
            "ERROR",
            "IMAGEBUILDINPROGRESS",
            "UPDATING"
          ]
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "CICDStatusModel": {
      "type": "object",
      "description": "Possible states of a run",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "GITCLONE",
            "CICDBUILD",
            "WAITINGIMAGE",
            "CICDBUILDCOMPLETE"
          ]
        },
        "reason": {
          "type": "string"
        },
        "programPath": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        }
      }
    },
    "DLSupport": {
      "type": "object",
      "description": "Identifies all the DL support by dkube",
      "properties": {
        "version": {
          "type": "string"
        },
        "frameworks": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tensorflow",
              "mxnet"
            ]
          }
        },
        "tensorflow": {
          "type": "object",
          "properties": {
            "versions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DkubeInfo": {
      "type": "object",
      "description": "Identifies all the information about dkube",
      "properties": {
        "version": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "itservices": {
          "type": "string"
        },
        "CICD": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "string"
            }
          }
        },
        "license": {
          "type": "object",
          "required": [
            "startDate",
            "endDate",
            "validity",
            "licensee",
            "genTime",
            "expired",
            "quota",
            "gracePeriod",
            "onboardedUserCount",
            "uuid"
          ],
          "properties": {
            "startDate": {
              "type": "string"
            },
            "endDate": {
              "type": "string"
            },
            "validity": {
              "type": "integer"
            },
            "licensee": {
              "type": "string"
            },
            "genTime": {
              "type": "string"
            },
            "expired": {
              "type": "boolean",
              "default": false
            },
            "quota": {
              "type": "integer"
            },
            "gracePeriod": {
              "type": "integer"
            },
            "onboardedUserCount": {
              "type": "integer"
            },
            "uuid": {
              "type": "string"
            }
          }
        },
        "release": {
          "type": "object",
          "description": "Schema for maintaining previous and current dkube release versions.",
          "required": [
            "previous",
            "current"
          ],
          "properties": {
            "previous": {
              "type": "string",
              "description": "The previous Dkube version if it has been migrated."
            },
            "current": {
              "type": "string",
              "description": "The current Dkube version."
            }
          }
        },
        "auth": {
          "type": "object",
          "$ref": "#/definitions/AuthModel"
        },
        "rdma": {
          "type": "boolean",
          "default": false
        },
        "frameworks": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "tensorflow"
            ]
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "features_disabled": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tensorflow": {
          "type": "object",
          "properties": {
            "versions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "minimal": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "DLFrameworkModel": {
      "type": "object",
      "properties": {
        "frameworks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "versions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "image": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "DLFrameworkProject": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DLFramework": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DLFrameworks": {
      "type": "object",
      "description": "Identifies all the DL frameworks",
      "properties": {
        "nb-ide": {
          "$ref": "#/definitions/DLFrameworkModel"
        },
        "r-ide": {
          "$ref": "#/definitions/DLFrameworkModel"
        },
        "training": {
          "$ref": "#/definitions/DLFrameworkModel"
        },
        "preprocessing": {
          "$ref": "#/definitions/DLFrameworkModel"
        },
        "eval": {
          "$ref": "#/definitions/DLFrameworkModel"
        },
        "serving": {
          "$ref": "#/definitions/DLFrameworkModel"
        },
        "project": {
          "$ref": "#/definitions/DLFrameworkProject"
        },
        "frameworks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DLFramework"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DkubeContainerModel": {
      "type": "object",
      "description": "Schema for dkube container execution",
      "properties": {
        "framework": {
          "type": "object",
          "properties": {
            "choice": {
              "type": "string"
            },
            "details": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "Supported framework versions by dkube."
                },
                "image": {
                  "type": "string"
                },
                "private": {
                  "type": "boolean",
                  "default": false
                },
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "CustomContainerModel": {
      "type": "object",
      "description": "Schema for custom container execution",
      "properties": {
        "image": {
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "path": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "runas": {
              "type": "string"
            }
          }
        }
      }
    },
    "CustomKVModel": {
      "type": "array",
      "description": "Each entry should be JSON key:value pair",
      "items": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ConfigFileModel": {
      "type": "object",
      "description": "Hyper parameter file",
      "properties": {
        "name": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "JobDatumModel": {
      "type": "object",
      "properties": {
        "workspace": {
          "type": "object",
          "properties": {
            "data": {
              "$ref": "#/definitions/JobInputDatumModel"
            },
            "script": {
              "type": "string"
            }
          }
        },
        "models": {
          "type": "array",
          "description": "List of model names the job would use.",
          "items": {
            "$ref": "#/definitions/JobInputDatumModel"
          }
        },
        "datasets": {
          "type": "array",
          "description": "List of dataset names the job would use.",
          "items": {
            "$ref": "#/definitions/JobInputDatumModel"
          }
        },
        "outputs": {
          "type": "array",
          "description": "List of datum names the job would generate.",
          "items": {
            "$ref": "#/definitions/JobInputDatumModel"
          }
        }
      }
    },
    "JobInputDatumModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "mountpath": {
          "type": "string"
        },
        "version_name": {
          "type": "string"
        }
      }
    },
    "JobInputFeaturesetModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "mountpath": {
          "type": "string"
        },
        "version_name": {
          "type": "string"
        },
        "job_added": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "JobFeaturesetModel": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "description": "List of featureset names the job would use.",
          "items": {
            "$ref": "#/definitions/JobInputFeaturesetModel"
          }
        },
        "outputs": {
          "type": "array",
          "description": "List of featureset names the job would generate.",
          "items": {
            "$ref": "#/definitions/JobInputFeaturesetModel"
          }
        }
      }
    },
    "DSJobModel": {
      "type": "object",
      "description": "Schema for a datascience job - common schema for Distributed Training Job / Notebook / Rstudio",
      "properties": {
        "executor": {
          "type": "object",
          "properties": {
            "choice": {
              "type": "string",
              "enum": [
                "dkube",
                "custom"
              ]
            },
            "buildfromproject": {
              "type": "boolean",
              "default": false
            },
            "dkube": {
              "$ref": "#/definitions/DkubeContainerModel",
              "description": "Executor object for dkube class"
            },
            "custom": {
              "$ref": "#/definitions/CustomContainerModel",
              "description": "Executor object for custom class"
            }
          }
        },
        "datums": {
          "$ref": "#/definitions/JobDatumModel"
        },
        "featuresets": {
          "$ref": "#/definitions/JobFeaturesetModel"
        },
        "tags": {
          "type": "array",
          "description": "Custom tags set by user for the job.",
          "items": {
            "type": "string"
          }
        },
        "hptuning": {
          "type": "object",
          "description": "a string of YAML file",
          "properties": {
            "name": {
              "type": "string"
            },
            "body": {
              "type": "string"
            }
          }
        },
        "hyperparams": {
          "type": "object",
          "properties": {
            "epochs": {
              "type": "integer",
              "format": "int32"
            },
            "steps": {
              "type": "integer",
              "format": "int32"
            },
            "batchsize": {
              "type": "integer",
              "format": "int32"
            },
            "custom": {
              "type": "array",
              "description": "Each entry should be JSON key:value pair",
              "items": {
                "type": "string"
              }
            },
            "customkv": {
              "$ref": "#/definitions/CustomKVModel"
            },
            "file": {
              "$ref": "#/definitions/ConfigFileModel"
            }
          }
        },
        "nworkers": {
          "type": "integer",
          "format": "int32"
        },
        "ngpus": {
          "type": "integer",
          "format": "int32"
        },
        "rdma": {
          "type": "boolean",
          "default": true
        },
        "gpus_override": {
          "type": "boolean",
          "default": true
        },
        "view": {
          "type": "object",
          "properties": {
            "ready": {
              "type": "boolean",
              "default": false
            }
          }
        },
        "cluster": {
          "$ref": "#/definitions/JobClusterModel"
        }
      }
    },
    "JobClusterModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "enum": [
            "CLUSTER_LOCAL",
            "CLUSTER_SLURMHPC_REMOTE"
          ]
        },
        "scheduling_opts": {
          "type": "object",
          "properties": {
            "slurmhpc": {
              "type": "object",
              "properties": {
                "file": {
                  "$ref": "#/definitions/ConfigFileModel"
                }
              }
            }
          }
        }
      }
    },
    "CertFileModel": {
      "type": "object",
      "description": "Certificate file",
      "properties": {
        "name": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "InferenceJobModel": {
      "type": "object",
      "description": "Schema for a Inference Job Model",
      "properties": {
        "model": {
          "type": "string",
          "description": "Name of the model to be deployed"
        },
        "version": {
          "type": "string",
          "description": "Version of the model to be deployed"
        },
        "owner": {
          "type": "string",
          "description": "Name of the user who owns the model"
        },
        "device": {
          "type": "string",
          "description": "Type of device to serve model on",
          "enum": [
            "cpu",
            "gpu"
          ]
        },
        "deploy": {
          "type": "boolean",
          "default": false
        },
        "mcname": {
          "type": "string",
          "description": "Model catalog item name"
        },
        "serving_image": {
          "$ref": "#/definitions/CustomContainerModel"
        },
        "transformer": {
          "type": "boolean",
          "default": false
        },
        "transformer_image": {
          "$ref": "#/definitions/CustomContainerModel"
        },
        "transformer_project": {
          "type": "string"
        },
        "transformer-commitID": {
          "type": "string"
        },
        "transformer_code": {
          "type": "string",
          "description": "path to transformer code in the project selected"
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32"
        },
        "maxConcurrentRequests": {
          "type": "integer",
          "format": "int32"
        },
        "envs": {
          "$ref": "#/definitions/CustomKVModel"
        },
        "resourceRequirements": {
          "$ref": "#/definitions/ResourceRequirements"
        },
        "enable_logs": {
          "type": "boolean",
          "x-nullable": true
        }
      }
    },
    "JobConfigModel": {
      "type": "object",
      "description": "Schema for data and custom job configuration",
      "properties": {
        "envs": {
          "$ref": "#/definitions/CustomKVModel"
        },
        "file": {
          "$ref": "#/definitions/ConfigFileModel"
        }
      }
    },
    "PreprocessingJobModel": {
      "type": "object",
      "description": "Schema for a data processing job.",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "preprocessing",
            "ingestion"
          ]
        },
        "executor": {
          "type": "object",
          "properties": {
            "choice": {
              "type": "string",
              "enum": [
                "custom",
                "spark"
              ]
            },
            "buildfromproject": {
              "type": "boolean",
              "default": false
            },
            "custom": {
              "$ref": "#/definitions/CustomContainerModel",
              "description": "Executor object for custom class"
            }
          }
        },
        "datums": {
          "$ref": "#/definitions/JobDatumModel"
        },
        "featuresets": {
          "$ref": "#/definitions/JobFeaturesetModel"
        },
        "tags": {
          "type": "array",
          "description": "Custom tags set by user for the job.",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "$ref": "#/definitions/JobConfigModel"
        },
        "cluster": {
          "$ref": "#/definitions/JobClusterModel"
        },
        "ngpus": {
          "type": "integer",
          "format": "int32"
        },
        "gpus_override": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "CustomJobModel": {
      "type": "object",
      "description": "Schema for a custom job.",
      "properties": {
        "datums": {
          "$ref": "#/definitions/JobDatumModel"
        },
        "tags": {
          "type": "array",
          "description": "Custom tags set by user for the job.",
          "items": {
            "type": "string"
          }
        },
        "config": {
          "$ref": "#/definitions/JobConfigModel"
        },
        "service": {
          "type": "object",
          "properties": {
            "targetport": {
              "type": "integer"
            },
            "exposeas": {
              "type": "string",
              "enum": [
                "nodeport",
                "dkubeproxy",
                "clusterip"
              ]
            }
          }
        },
        "container": {
          "$ref": "#/definitions/CustomContainerModel"
        }
      }
    },
    "CustomJobResultModel": {
      "type": "object",
      "description": "Defines schema for custom job result",
      "properties": {
        "url": {
          "type": "string",
          "description": "Service url"
        },
        "outdir": {
          "type": "string",
          "description": "Minio path where output is stored"
        },
        "view": {
          "type": "object",
          "properties": {
            "ready": {
              "type": "boolean",
              "default": false
            }
          }
        }
      }
    },
    "NotebookResultModel": {
      "type": "object",
      "description": "Defines schema for training notebook result",
      "properties": {
        "nburl": {
          "type": "string",
          "description": "Jupyter URL to view notebook"
        }
      }
    },
    "TrainingResultModel": {
      "type": "object",
      "description": "Defines schema for training result",
      "properties": {
        "model": {
          "type": "string",
          "description": "Name of the model generated after training"
        }
      }
    },
    "TensorboardModel": {
      "type": "object",
      "description": "Defines schema for tensorboad associated with training/trained model/notebook",
      "properties": {
        "version": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "ServingResultModel": {
      "type": "object",
      "description": "Defines schema for an inference job result",
      "properties": {
        "modeldir": {
          "type": "string",
          "description": "Name of dir where the artificats of this model are stored"
        },
        "servingurl": {
          "type": "string"
        },
        "curlcmd": {
          "type": "string"
        },
        "apiPrefix": {
          "type": "string"
        }
      }
    },
    "AffinityModel": {
      "type": "object",
      "description": "Affinity fields for subjects in a distributed environment.",
      "properties": {
        "server": {
          "type": "string",
          "description": "D3API server name"
        }
      }
    },
    "TrackingModel": {
      "type": "object",
      "properties": {
        "runId": {
          "type": "string"
        },
        "artifactId": {
          "type": "string"
        },
        "versionId": {
          "type": "string"
        },
        "pipelineId": {
          "type": "string"
        }
      }
    },
    "ModelMetrics": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "class": {
            "type": "string",
            "enum": [
              "CURVE",
              "SCALAR",
              "TABLE",
              "CONFUSION_MATRIX"
            ]
          },
          "name": {
            "type": "string"
          },
          "curve": {
            "type": "object",
            "properties": {
              "csv": {
                "type": "string"
              }
            }
          },
          "table": {
            "type": "object",
            "properties": {
              "csv": {
                "type": "string"
              }
            }
          },
          "scalar": {
            "type": "string"
          },
          "confusion_matrix": {
            "type": "object",
            "properties": {
              "csv": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Metrics": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ModelCatalogMetrics": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "metrics": {
            "$ref": "#/definitions/Metrics"
          }
        }
      }
    },
    "DatumMetrics": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uuid": {
                  "type": "string"
                },
                "inputs": {
                  "type": "object",
                  "properties": {
                    "workspace": {
                      "$ref": "#/definitions/JobInputDatumModel"
                    },
                    "models": {
                      "type": "array",
                      "description": "List of model names the job would use.",
                      "items": {
                        "$ref": "#/definitions/JobInputDatumModel"
                      }
                    },
                    "datasets": {
                      "type": "array",
                      "description": "List of dataset names the job would use.",
                      "items": {
                        "$ref": "#/definitions/JobInputDatumModel"
                      }
                    }
                  }
                },
                "metrics": {
                  "$ref": "#/definitions/Metrics"
                }
              }
            }
          }
        }
      }
    },
    "JobModel": {
      "type": "object",
      "description": "Schema for a Job in dkube.",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "class": {
              "type": "string",
              "enum": [
                "training",
                "notebook",
                "inference",
                "preprocessing",
                "custom",
                "rstudio"
              ]
            },
            "user_group": {
              "type": "string"
            },
            "project": {
              "type": "string"
            },
            "gpu_allocation": {
              "$ref": "#/definitions/Gpu_allocation"
            },
            "priority": {
              "type": "object",
              "properties": {
                "donot_queue": {
                  "type": "string"
                }
              }
            },
            "training": {
              "$ref": "#/definitions/DSJobModel",
              "description": "Training job related inputs. Should be provided if choice is training job."
            },
            "notebook": {
              "$ref": "#/definitions/DSJobModel",
              "description": "Notebook job related inputs. Should be provided if choice is notebook job."
            },
            "inference": {
              "$ref": "#/definitions/InferenceJobModel",
              "description": "Inference job related inputs. Should be provided if choice is inference job."
            },
            "preprocessing": {
              "$ref": "#/definitions/PreprocessingJobModel",
              "description": "Data processing job related inputs. Should be provided if choice is data job. Job which downloads/does some processing on available data and generates new dataset for further consumption."
            },
            "custom": {
              "$ref": "#/definitions/CustomJobModel",
              "description": "Custom job related inputs. Should be provided if choice is custom. Job which does custom tasks."
            },
            "run": {
              "type": "object",
              "properties": {
                "template": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                }
              }
            },
            "generated": {
              "type": "object",
              "readOnly": true,
              "properties": {
                "deleted": {
                  "type": "boolean",
                  "default": false
                },
                "archived": {
                  "type": "boolean",
                  "default": false
                },
                "private": {
                  "type": "string"
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "template",
                    "run"
                  ]
                },
                "cicdstatus": {
                  "$ref": "#/definitions/CICDStatusModel"
                },
                "pipeline": {
                  "type": "object",
                  "properties": {
                    "runid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "subclass": {
                  "type": "string",
                  "enum": [
                    "training",
                    "inference",
                    "notebook",
                    "rstudio",
                    "study",
                    "studytrial",
                    "dkube"
                  ]
                },
                "hp_tuning_info": {
                  "type": "string",
                  "description": "Tuning hyperparam json string"
                },
                "training_image": {
                  "$ref": "#/definitions/CustomContainerModel"
                },
                "serving_image": {
                  "$ref": "#/definitions/CustomContainerModel"
                },
                "scheduled": {
                  "type": "boolean",
                  "description": "identifing job scheduled or not"
                },
                "affinity": {
                  "type": "string",
                  "description": "Affinity of this job."
                },
                "user": {
                  "type": "string",
                  "description": "user to which this job belongs"
                },
                "jobid": {
                  "type": "string",
                  "description": "6Char alphanumeric ID unique per user"
                },
                "uuid": {
                  "type": "string"
                },
                "status": {
                  "$ref": "#/definitions/JobStatusModel"
                },
                "timestamps": {
                  "$ref": "#/definitions/TimeStamps"
                },
                "runtime": {
                  "$ref": "#/definitions/TimeStamps"
                },
                "ngpus_alloc": {
                  "type": "integer",
                  "description": "Actual number of gpus allocated to this job, will determined when jobs get to running"
                },
                "ngpus_max": {
                  "type": "integer",
                  "description": "Max number of gpus this job could get allocated with."
                },
                "tbref": {
                  "type": "string",
                  "description": "UUID of TB resouruce"
                },
                "studyref": {
                  "type": "string",
                  "description": "Unique id of study job"
                },
                "trialref": {
                  "type": "string",
                  "description": "Unique id of a studyjob trial"
                },
                "best_trial_id": {
                  "type": "string",
                  "description": "Unique id of best studyjob trial"
                },
                "best_objective_value": {
                  "type": "number",
                  "description": "Objective value of best studyjob trial"
                },
                "accelerator": {
                  "type": "string",
                  "description": "Node affinity"
                },
                "versions": {
                  "type": "object",
                  "properties": {
                    "cuda": {
                      "type": "string"
                    },
                    "dkube": {
                      "type": "string"
                    },
                    "nvidia": {
                      "type": "string"
                    }
                  }
                },
                "tracking": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "inputDatumRefs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "class": {
                        "type": "string"
                      },
                      "uuid": {
                        "type": "string"
                      }
                    }
                  }
                },
                "inputFeaturesetRefs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fsetuuid": {
                        "type": "string"
                      },
                      "version_uuid": {
                        "type": "string"
                      },
                      "version_name": {
                        "type": "string"
                      },
                      "version_index": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "details": {
                  "type": "object",
                  "properties": {
                    "tensorboard": {
                      "$ref": "#/definitions/TensorboardModel"
                    },
                    "notebook": {
                      "$ref": "#/definitions/NotebookResultModel",
                      "description": "Will be set if the choice was notebook"
                    },
                    "training": {
                      "$ref": "#/definitions/TrainingResultModel",
                      "description": "Will be set if the choice was training"
                    },
                    "serving": {
                      "$ref": "#/definitions/ServingResultModel",
                      "description": "Will be generated and set if the choice was serving"
                    },
                    "custom": {
                      "$ref": "#/definitions/CustomJobResultModel"
                    },
                    "accesstoken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "Image": {
      "type": "object",
      "description": "schema for platform images",
      "properties": {
        "name": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "digest": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "private": {
          "type": "boolean"
        },
        "project": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Registry": {
      "type": "object",
      "description": "schema for image registry",
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "enum": [
            "docker",
            "ecr"
          ]
        },
        "iam-role": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "ImageModel": {
      "type": "object",
      "description": "schema for image registry",
      "properties": {
        "image": {
          "$ref": "#/definitions/Image"
        },
        "registry": {
          "$ref": "#/definitions/Registry"
        }
      }
    },
    "WorkerModel": {
      "type": "object",
      "description": "Schema for workers of a job.",
      "readOnly": true,
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "default": "SINGLETON"
        },
        "uuid": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              }
            }
          }
        },
        "status": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "poduuid": {
          "type": "string"
        },
        "exit_code": {
          "type": "integer"
        },
        "node": {
          "type": "string"
        }
      }
    },
    "Gpu_allocation": {
      "type": "object",
      "properties": {
        "manual": {
          "type": "boolean"
        },
        "auto": {
          "type": "boolean"
        }
      }
    },
    "DeviceModel": {
      "type": "object",
      "readOnly": true,
      "description": "Schema for dkube devices e.g., GPUs.",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "class": {
          "type": "string",
          "enum": [
            "gpu"
          ],
          "default": "gpu"
        },
        "vendor": {
          "type": "string",
          "enum": [
            "nvidia"
          ],
          "default": "nvidia"
        },
        "model": {
          "type": "string"
        },
        "instance_type": {
          "type": "string",
          "enum": [
            "gpu",
            "mig"
          ],
          "default": "gpu"
        },
        "instance_profile": {
          "type": "string",
          "default": "gpu"
        },
        "UUID": {
          "type": "string"
        },
        "healthy": {
          "type": "boolean",
          "default": true
        },
        "node": {
          "type": "string"
        },
        "created_at": {
          "$ref": "#/definitions/TimeStamps"
        }
      }
    },
    "CpuModel": {
      "type": "object",
      "description": "Schema for dkube devices e.g., CPUs.",
      "properties": {
        "version": {
          "type": "string"
        },
        "cpus": {
          "type": "string"
        },
        "architecture": {
          "type": "string"
        },
        "cpu_op_models": {
          "type": "string"
        },
        "byte_order": {
          "type": "string"
        },
        "threads_per_core": {
          "type": "integer",
          "format": "int32"
        },
        "cores_per_socket": {
          "type": "integer",
          "format": "int32"
        },
        "sockets": {
          "type": "integer",
          "format": "int32"
        },
        "vendor": {
          "type": "string"
        },
        "modelNumber": {
          "type": "string"
        },
        "cores": {
          "type": "integer",
          "format": "int32"
        },
        "modelName": {
          "type": "string"
        },
        "frequency": {
          "type": "string"
        },
        "frequency_max": {
          "type": "string"
        },
        "frequency_min": {
          "type": "string"
        },
        "virtualization": {
          "type": "string"
        },
        "family": {
          "type": "string"
        },
        "l1d_cache": {
          "type": "string"
        },
        "l1i_cache": {
          "type": "string"
        },
        "l2_cache": {
          "type": "string"
        },
        "l3_cache": {
          "type": "string"
        }
      }
    },
    "DevicePoolModel": {
      "type": "object",
      "description": "Schema for device pools. Multiple devices can be pooled together.",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "class": {
          "type": "string",
          "description": "Model of devices - homogenous pool"
        },
        "instance_type": {
          "type": "string",
          "default": "gpu",
          "description": "instance type of the  devices in the pool"
        },
        "ndevices": {
          "type": "integer",
          "format": "uint16",
          "description": "Number of devices in the pool"
        },
        "created_at": {
          "$ref": "#/definitions/TimeStamps"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        }
      }
    },
    "GroupModel": {
      "type": "object",
      "description": "Schema for the user group. Multiple users could be grouped. Device pools can be assigned to each group. Each group will have unique properties and access priviliges.",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "providertype": {
          "type": "string",
          "enum": [
            "external"
          ]
        },
        "provider": {
          "type": "string",
          "enum": [
            "github"
          ]
        },
        "created_at": {
          "$ref": "#/definitions/TimeStamps"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        }
      }
    },
    "NodeModel": {
      "type": "object",
      "readOnly": true,
      "description": "Schema for dkube nodes",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "network": {
          "type": "object",
          "properties": {
            "hostname": {
              "type": "string"
            },
            "hostip": {
              "type": "string"
            },
            "hostmac": {
              "type": "string"
            }
          }
        },
        "software": {
          "type": "object",
          "properties": {
            "osversion": {
              "type": "string"
            },
            "kernel": {
              "type": "string"
            }
          }
        },
        "capacity": {
          "type": "object",
          "properties": {
            "cpus": {
              "$ref": "#/definitions/CpuModel"
            },
            "memory": {
              "type": "string"
            }
          }
        },
        "accelerator": {
          "type": "object",
          "properties": {
            "healthy": {
              "type": "boolean",
              "default": true
            },
            "class": {
              "type": "string",
              "enum": [
                "gpu"
              ],
              "default": "gpu"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "dkube": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string"
            }
          }
        },
        "uptime": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        },
        "cluster_name": {
          "type": "string"
        },
        "blob": {
          "type": "string"
        }
      }
    },
    "D3APIKeyModel": {
      "type": "object",
      "description": "Schema for all the keys generated/stored by/in dkube",
      "readOnly": true,
      "properties": {
        "version": {
          "type": "string"
        },
        "apikey": {
          "type": "string"
        },
        "revoked": {
          "type": "boolean",
          "default": false
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        }
      }
    },
    "D3StateModel": {
      "type": "object",
      "description": "State of the dkube system",
      "readOnly": true,
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "default",
            "ready"
          ]
        }
      }
    },
    "JobCollection": {
      "type": "object",
      "description": "Collection object of a job",
      "readOnly": true,
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobModel"
          }
        },
        "job": {
          "$ref": "#/definitions/JobModel"
        },
        "workers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkerModel"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "device": {
                "$ref": "#/definitions/DeviceModel"
              },
              "node": {
                "$ref": "#/definitions/NodeModel"
              }
            }
          }
        }
      }
    },
    "Counters": {
      "type": "object",
      "description": "Schema for counters",
      "readOnly": true,
      "properties": {
        "active": {
          "type": "string"
        },
        "total": {
          "type": "string"
        },
        "failed": {
          "type": "string"
        },
        "complete": {
          "type": "string"
        }
      }
    },
    "UserCollection": {
      "type": "object",
      "description": "Collection object of a user",
      "readOnly": true,
      "properties": {
        "counters": {
          "type": "object",
          "properties": {
            "notebooks": {
              "$ref": "#/definitions/Counters"
            },
            "jobs": {
              "$ref": "#/definitions/Counters"
            },
            "inferences": {
              "$ref": "#/definitions/Counters"
            },
            "preprocessing": {
              "$ref": "#/definitions/Counters"
            },
            "rstudio": {
              "$ref": "#/definitions/Counters"
            },
            "ngpus": {
              "type": "string"
            }
          }
        },
        "user": {
          "$ref": "#/definitions/UserModel"
        },
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatumModel"
          }
        },
        "datasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatumModel"
          }
        },
        "programs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatumModel"
          }
        },
        "jobs": {
          "type": "object",
          "properties": {
            "notebooks": {
              "type": "object",
              "properties": {
                "running": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "completed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "failed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                }
              }
            },
            "jobs": {
              "type": "object",
              "properties": {
                "running": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "completed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "failed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                }
              }
            },
            "inferences": {
              "type": "object",
              "properties": {
                "running": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "completed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "failed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                }
              }
            },
            "preprocessing": {
              "type": "object",
              "properties": {
                "running": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "completed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                },
                "failed": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/JobCollection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "PoolCollection": {
      "type": "object",
      "description": "Collection object of a pool",
      "readOnly": true,
      "properties": {
        "pool": {
          "$ref": "#/definitions/DevicePoolModel"
        },
        "devices": {
          "type": "object",
          "properties": {
            "inuse": {
              "type": "object",
              "description": "All devices of the pool in use by some job.",
              "properties": {
                "count": {
                  "type": "integer"
                },
                "devices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeviceModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "GroupCollection": {
      "type": "object",
      "description": "Collection object of a group",
      "readOnly": true,
      "properties": {
        "group": {
          "$ref": "#/definitions/GroupModel"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/definitions/UserModel"
              },
              "devices": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceModel",
                  "description": "All devices currently used by user will be listed here."
                }
              }
            }
          }
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PoolCollection"
          }
        }
      }
    },
    "NodeCollection": {
      "type": "object",
      "description": "Collection object of a dkube node",
      "readOnly": true,
      "properties": {
        "node": {
          "$ref": "#/definitions/NodeModel"
        },
        "devices": {
          "type": "object",
          "properties": {
            "gpus": {
              "type": "object",
              "properties": {
                "healthy": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeviceModel"
                  }
                },
                "unhealthy": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DeviceModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "MigrationMetaModel": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatumModel"
          }
        },
        "genmodels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatumModel"
          }
        },
        "job": {
          "$ref": "#/definitions/JobModel"
        },
        "vizierdb": {
          "type": "string"
        }
      }
    },
    "MigrationJobEntry": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "class": {
          "type": "string"
        }
      }
    },
    "MigrationObjUUID": {
      "type": "object",
      "description": "source and destination uuids",
      "properties": {
        "src_UUID": {
          "type": "string"
        },
        "tgt_UUID": {
          "type": "string"
        },
        "src_name": {
          "type": "string"
        },
        "tgt_name": {
          "type": "string"
        }
      }
    },
    "MigrationDatumModel": {
      "type": "object",
      "description": "datum meta data for migration",
      "properties": {
        "UUID": {
          "type": "string"
        },
        "remote_UUID": {
          "type": "string"
        },
        "dkubeDatumUUIDs": {
          "$ref": "#/definitions/MigrationObjUUID"
        },
        "migrationUUID": {
          "type": "string"
        },
        "migrationJobUUID": {
          "type": "string"
        },
        "duplicate": {
          "type": "boolean"
        },
        "duplicate_ref": {
          "type": "string"
        },
        "datum_type": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "progress": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "string"
        }
      }
    },
    "MigrationJobModel": {
      "type": "object",
      "description": "job meta data for migration",
      "properties": {
        "name": {
          "type": "string"
        },
        "class": {
          "type": "string"
        },
        "UUID": {
          "type": "string"
        },
        "remote_UUID": {
          "type": "string"
        },
        "src_state": {
          "type": "string"
        },
        "dkubeJobUUIDS": {
          "$ref": "#/definitions/MigrationObjUUID"
        },
        "migrationUUID": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "progress": {
          "type": "integer",
          "format": "int32"
        },
        "datums": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "type": "string"
        }
      }
    },
    "MigrationModel": {
      "type": "object",
      "description": "meta data for migration",
      "properties": {
        "version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "UUID": {
          "type": "string"
        },
        "remote_UUID": {
          "type": "string"
        },
        "User": {
          "type": "string"
        },
        "triggering_point": {
          "enum": [
            "source",
            "target"
          ]
        },
        "location": {
          "enum": [
            "source",
            "target"
          ]
        },
        "remote": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "JWT": {
              "type": "string"
            },
            "user": {
              "type": "string"
            }
          }
        },
        "progress": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/MigrationStatusModel"
        },
        "time_stamp": {
          "type": "string"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrationJobEntry"
          }
        },
        "job_refs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MigrationJobStatus": {
      "type": "object",
      "description": "status for migration",
      "properties": {
        "job": {
          "$ref": "#/definitions/MigrationJobModel"
        },
        "datums": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrationDatumModel"
          }
        }
      }
    },
    "MigrationStatus": {
      "type": "object",
      "description": "status for migration",
      "properties": {
        "migration": {
          "$ref": "#/definitions/MigrationModel"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MigrationJobStatus"
          }
        }
      }
    },
    "MigrationStatusModel": {
      "type": "object",
      "description": "Possible states of a run",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "QUEUED",
            "SCHEDULED",
            "MIGRATING",
            "COMPLETE",
            "STOPPED",
            "ERROR"
          ]
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "ProjectUpdateModel": {
      "title": "ProjectUpdateModel",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "image": {
          "title": "Image",
          "maxLength": 2083,
          "minLength": 1,
          "type": "string"
        },
        "leaderboard": {
          "title": "Leaderboard",
          "type": "boolean",
          "default": false
        },
        "details": {
          "title": "Project Details",
          "type": "string"
        },
        "eval_repo": {
          "title": "Eval Repo",
          "type": "string"
        },
        "eval_commit_id": {
          "title": "Eval Commit Id",
          "type": "string"
        },
        "eval_image": {
          "title": "Eval Image",
          "type": "string"
        },
        "eval_script": {
          "title": "Eval Script",
          "type": "string"
        },
        "eval_details": {
          "title": "Eval Details",
          "type": "string"
        },
        "eval_dataset": {
          "$ref": "#/definitions/ProjectEvalDatumModel"
        },
        "feastEnabled": {
          "title": "Feast project",
          "type": "boolean"
        }
      }
    },
    "ProjectEvalDatumModel": {
      "title": "ProjectEvalMountModel",
      "type": "object",
      "properties": {
        "name": {
          "title": "Mount dataset",
          "type": "string"
        },
        "version": {
          "title": "Mount dataset version",
          "type": "string"
        }
      }
    },
    "ProjectModel": {
      "title": "ProjectModel",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "image": {
          "title": "Image",
          "maxLength": 2083,
          "minLength": 1,
          "type": "string"
        },
        "leaderboard": {
          "title": "Leaderboard",
          "type": "boolean",
          "default": false
        },
        "id": {
          "title": "Id",
          "type": "string"
        },
        "owner": {
          "title": "Owner",
          "type": "string"
        },
        "group": {
          "title": "group",
          "type": "string"
        },
        "last_updated": {
          "title": "Last Updated",
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "details": {
          "title": "Project Details",
          "type": "string"
        },
        "eval_repo": {
          "title": "Eval Repo",
          "type": "string"
        },
        "eval_commit_id": {
          "title": "Eval Commit Id",
          "type": "string"
        },
        "eval_image": {
          "title": "Eval Image",
          "type": "string"
        },
        "eval_script": {
          "title": "Eval Script",
          "type": "string"
        },
        "eval_details": {
          "title": "Eval Details",
          "type": "string"
        },
        "feastEnabled": {
          "title": "Feast Enabled",
          "type": "boolean"
        },
        "submissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmissionModel"
          }
        },
        "status": {
          "$ref": "#/definitions/ProjectStatusModel"
        },
        "eval_dataset": {
          "$ref": "#/definitions/ProjectEvalDatumModel"
        }
      }
    },
    "ProjectListModel": {
      "title": "ProjectListModel",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "description": {
          "title": "Description",
          "type": "string"
        },
        "image": {
          "title": "Image",
          "maxLength": 2083,
          "minLength": 1,
          "type": "string"
        },
        "leaderboard": {
          "title": "Leaderboard",
          "type": "boolean",
          "default": false
        },
        "id": {
          "title": "Id",
          "type": "string"
        },
        "owner": {
          "title": "Owner",
          "type": "string"
        },
        "group": {
          "title": "group",
          "type": "string"
        },
        "last_updated": {
          "title": "Last Updated",
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "status": {
          "$ref": "#/definitions/ProjectStatusModel"
        }
      }
    },
    "SubmissionModel": {
      "title": "SubmissionModel",
      "type": "object",
      "properties": {
        "id": {
          "title": "Submission Id",
          "type": "string"
        },
        "project_id": {
          "title": "Project Id",
          "type": "string"
        },
        "group_name": {
          "title": "Groupname",
          "type": "string"
        },
        "user": {
          "title": "Username",
          "type": "string"
        },
        "eval_run": {
          "title": "Eval Run",
          "type": "string"
        },
        "eval_run_name": {
          "title": "Eval Run Name",
          "type": "string"
        },
        "experiment_name": {
          "title": "Experiment Name",
          "type": "string"
        },
        "pipeline_name": {
          "title": "Pipeline Name",
          "type": "string"
        },
        "metrics": {
          "title": "Metrics",
          "type": "object",
          "additionalProperties": true
        },
        "artifacts_url": {
          "title": "Artifacts URL",
          "type": "string"
        },
        "timestamp": {
          "title": "Timestamp",
          "type": "string"
        }
      }
    },
    "LogViewer": {
      "type": "object",
      "properties": {
        "Username": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "SvrAddress": {
          "type": "string"
        },
        "Protocol": {
          "type": "string"
        },
        "Port": {
          "type": "string"
        }
      }
    },
    "NotificationData": {
      "type": "object",
      "properties": {
        "Username": {
          "type": "string"
        },
        "JobUUID": {
          "type": "string"
        },
        "Class": {
          "type": "string"
        },
        "Subclass": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        },
        "NotebookUrl": {
          "type": "string"
        },
        "ServingUrl": {
          "type": "string"
        },
        "TensorboardUrl": {
          "type": "string"
        },
        "IsTensorboard": {
          "type": "boolean"
        },
        "Study": {
          "type": "object",
          "properties": {
            "StudyID": {
              "type": "string"
            },
            "BestTrialID": {
              "type": "string"
            },
            "BestObjectiveValue": {
              "type": "number"
            }
          }
        },
        "Worker": {
          "$ref": "#/definitions/WorkerModel"
        },
        "Datum": {
          "$ref": "#/definitions/DatumModel"
        },
        "Version": {
          "$ref": "#/definitions/VersionModel"
        }
      }
    },
    "ClusterStatus": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string"
          },
          "instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "node": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "RoleModel": {
      "type": "object",
      "description": "Role and details about access permissions",
      "properties": {
        "name": {
          "type": "string"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CapabilitiesModel"
          }
        }
      }
    },
    "Cluster": {
      "type": "object",
      "description": "Info about configured cluster",
      "required": [
        "auth_type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "enum": [
            "kubernetes-local",
            "dkube-remote",
            "slurm-remote",
            "sagemaker",
            "kserve",
            "custom"
          ]
        },
        "class": {
          "type": "string",
          "enum": [
            "execution",
            "monitoring"
          ]
        },
        "url": {
          "type": "string",
          "description": "URL of cluster"
        },
        "ca": {
          "type": "string",
          "description": "Certificate authority data"
        },
        "version": {
          "type": "string",
          "description": "version of cluster"
        },
        "auth_type": {
          "type": "string",
          "enum": [
            "jwt",
            "access_keys",
            "none"
          ]
        },
        "jwt_token_type": {
          "type": "string",
          "enum": [
            "sign-token",
            "use-token"
          ]
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "jwt_token": {
          "type": "string"
        },
        "jwt_signing_key": {
          "type": "string"
        },
        "cluster_user": {
          "type": "string"
        },
        "access_keys": {
          "$ref": "#/definitions/ClusterAccessKeysDef"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique tags provided by user"
        },
        "description": {
          "type": "string",
          "description": "User defined description for the cluster"
        },
        "plugin": {
          "type": "string"
        }
      }
    },
    "ClusterAccessKeysDef": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string"
        },
        "access_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        }
      }
    },
    "NodeGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "blob": {
          "type": "string"
        },
        "generated": {
          "type": "object",
          "readOnly": true,
          "properties": {
            "uuid": {
              "type": "string"
            }
          }
        }
      }
    },
    "ClusterDetails": {
      "type": "object",
      "description": "Details for a cluster",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/Cluster"
        },
        "nodegroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "node_group": {
                "$ref": "#/definitions/NodeGroup"
              },
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/NodeModel"
                }
              }
            }
          }
        }
      }
    },
    "JsonForm": {
      "type": "object",
      "description": "json form for slurm job",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "opts": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "CapabilitiesModel": {
      "type": "object",
      "description": "Capabilities of a role",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TokenInfo": {
      "type": "object",
      "description": "Claims for a given jwt token",
      "properties": {
        "username": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "description": "Schema for a generic response of dkube APIs on Success.",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "ApiError": {
      "type": "object",
      "description": "Schema for a generic response of dkube APIs on Failure.",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ModelmonitorApiResponse": {
      "type": "object",
      "description": "Schema for model monitor API response.",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ModelmonitorApiError": {
      "type": "object",
      "description": "Schema for model monitor API on Failure.",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "FeatureStore": {
      "type": "object",
      "description": "Schema for FeatureStore Configuration",
      "properties": {
        "class": {
          "type": "string",
          "enum": [
            "DVS",
            "None"
          ]
        },
        "dvs": {
          "type": "string"
        }
      }
    },
    "FeatureSetInputDef": {
      "type": "object",
      "description": "Schema for FeatureSet Configuration",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "tags": {
          "type": "array",
          "description": "User specified custom tags",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FeatureSetDef": {
      "type": "object",
      "description": "Schema for FeatureSet Configuration",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "tags": {
          "type": "array",
          "description": "User specified custom tags",
          "items": {
            "type": "string"
          }
        },
        "owner": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "created_ts": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "updated_ts": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "job": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "Creating",
            "Created",
            "Ready",
            "Updating",
            "Deleting",
            "Error"
          ]
        },
        "uuid": {
          "type": "string",
          "description": "Unique id generated by system (timestamp in milliseconds)"
        },
        "deleted": {
          "type": "boolean",
          "default": false
        },
        "archived": {
          "type": "boolean",
          "default": false
        },
        "originalName": {
          "type": "string"
        }
      }
    },
    "FeatureSpecDef": {
      "type": "object",
      "description": "Schema for featurespec",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "FeatureSetVersionDef": {
      "type": "object",
      "description": "Schema for version of a featureset",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the version given by user"
        },
        "uuid": {
          "type": "string",
          "description": "Unique id generated by system (timestamp in milliseconds)"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Unique tags provided by user"
        },
        "description": {
          "type": "string",
          "description": "User defined description for the version"
        },
        "index": {
          "type": "integer",
          "description": "Incremental index to sort"
        },
        "created_ts": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "updated_ts": {
          "type": "string",
          "format": "YYYY:MM:DD HH:MM:SS"
        },
        "state": {
          "type": "string",
          "description": "State of syncing data from cache to remote or remote to cache"
        },
        "user": {
          "type": "string",
          "description": "Name of the owner"
        },
        "featuresetName": {
          "type": "string",
          "description": "Name of the featureset"
        },
        "featuresetUUID": {
          "type": "string",
          "description": "UUID of featureset."
        },
        "job": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "pipeline",
                "dkube_run"
              ]
            },
            "name": {
              "type": "string",
              "description": "UUID of the job/pipeline which created this featureset"
            },
            "runid": {
              "type": "string"
            }
          }
        },
        "trackingUUID": {
          "type": "string"
        },
        "commitID": {
          "type": "string"
        }
      }
    },
    "FeatureSetUsageDef": {
      "type": "object",
      "description": "Schema for details of owner of a datum",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the job that uses the datum."
        },
        "user": {
          "type": "string",
          "description": "User to which this job belongs."
        },
        "jobid": {
          "type": "string",
          "description": "Jobid of job that uses the datum."
        },
        "class": {
          "type": "string",
          "description": "Class of job that uses the datum."
        },
        "state": {
          "type": "string",
          "description": "State of the job"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pipeline": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "runid": {
              "type": "string"
            }
          }
        }
      }
    },
    "FeatureSetCommitDef": {
      "type": "object",
      "description": "Schema for FeatureSet Commit",
      "required": [
        "job_uuid"
      ],
      "properties": {
        "job_uuid": {
          "type": "string",
          "description": "job uuid. This is available as env parameter"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255,
          "description": "description for the version created"
        },
        "tags": {
          "type": "array",
          "description": "User specified custom tags for the version",
          "items": {
            "type": "string"
          }
        },
        "featureset": {
          "type": "string",
          "description": "Name of the featureset"
        },
        "Path": {
          "type": "string",
          "description": "path where featureset is mounted."
        },
        "job": {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "pipeline",
                "dkube_run"
              ]
            }
          }
        }
      }
    },
    "FeaturesetLineageInOutModel": {
      "type": "object",
      "description": "Schema for FeatureSet Lineage Run inputs and outputs",
      "properties": {
        "name": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "version_name": {
          "type": "string"
        },
        "version_uuid": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "FeaturesetVersionCopyDef": {
      "type": "object",
      "properties": {
        "job_class": {
          "type": "string"
        },
        "job_uuid": {
          "type": "string"
        }
      }
    },
    "DataCopy": {
      "type": "object",
      "description": "Schema for copying data",
      "properties": {
        "src_path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "Job_UUID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "target_path": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "starting",
            "copying",
            "completed",
            "error",
            "aborted"
          ]
        },
        "UUID": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "progress": {
          "type": "integer",
          "description": "Progress in percentage"
        }
      }
    },
    "InferenceMonitoringOutModel": {
      "type": "object",
      "description": "Schema for inference monitoring output",
      "properties": {
        "job": {
          "$ref": "#/definitions/JobModel"
        },
        "prometheus_query": {
          "type": "string"
        },
        "deployments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceRequirements": {
      "type": "object",
      "description": "Schema for container CPU and memory resource requests/limits",
      "properties": {
        "requests": {
          "$ref": "#/definitions/ContainerResources",
          "description": "Requests describes the minimum amount of compute resources required"
        },
        "limits": {
          "$ref": "#/definitions/ContainerResources",
          "description": "Limits describes the maximum amount of compute resources allowed"
        }
      }
    },
    "ContainerResources": {
      "type": "object",
      "properties": {
        "CPU": {
          "type": "string"
        },
        "Memory": {
          "type": "string"
        }
      }
    },
    "SmtpArtifact": {
      "type": "object",
      "properties": {
        "full_name": {
          "type": "string"
        },
        "sender_email": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "string"
        },
        "smtp_server": {
          "type": "string"
        },
        "smtp_tls_port": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    }
  }
}