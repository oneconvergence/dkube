# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dkube.sdk.internal.dkube_api.api_client import ApiClient


class ModelmonitorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def modelmonitor_add_alerts(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to add modelmonitor alerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_add_alerts(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data50 data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_add_alerts_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_add_alerts_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_add_alerts_with_http_info(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to add modelmonitor alerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_add_alerts_with_http_info(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data50 data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_add_alerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_add_alerts`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_add_alerts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/alerts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_add_datasets(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to addd modelmonitor datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_add_datasets(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data47 data: (required)
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_add_datasets_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_add_datasets_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_add_datasets_with_http_info(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to addd modelmonitor datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_add_datasets_with_http_info(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data47 data: (required)
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_add_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_add_datasets`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_add_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/datasets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20073',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_add_one(self, data, **kwargs):  # noqa: E501
        """API to create a model monitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_add_one(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelmonitorDef data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_add_one_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_add_one_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_add_one_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to create a model monitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_add_one_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelmonitorDef data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_add_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_add_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelmonitorApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_alerts_list(self, modelmonitor, **kwargs):  # noqa: E501
        """API to list alerts for a specific modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_alerts_list(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str tags:
        :param int page:
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_alerts_list_with_http_info(modelmonitor, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_alerts_list_with_http_info(modelmonitor, **kwargs)  # noqa: E501
            return data

    def modelmonitor_alerts_list_with_http_info(self, modelmonitor, **kwargs):  # noqa: E501
        """API to list alerts for a specific modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_alerts_list_with_http_info(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str tags:
        :param int page:
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'tags', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_alerts_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_alerts_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_archive(self, modelmonitor, archive, **kwargs):  # noqa: E501
        """API to archive modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_archive(modelmonitor, archive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param bool archive: Boolean status that depicts whether modelmonitor should be archived or unarchived (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_archive_with_http_info(modelmonitor, archive, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_archive_with_http_info(modelmonitor, archive, **kwargs)  # noqa: E501
            return data

    def modelmonitor_archive_with_http_info(self, modelmonitor, archive, **kwargs):  # noqa: E501
        """API to archive modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_archive_with_http_info(modelmonitor, archive, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param bool archive: Boolean status that depicts whether modelmonitor should be archived or unarchived (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'archive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_archive`")  # noqa: E501
        # verify the required parameter 'archive' is set
        if ('archive' not in params or
                params['archive'] is None):
            raise ValueError("Missing the required parameter `archive` when calling `modelmonitor_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []
        if 'archive' in params:
            query_params.append(('archive', params['archive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/archive', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_component_status(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to Change Status of Pipeline Components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_component_status(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data46 data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_component_status_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_component_status_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_component_status_with_http_info(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to Change Status of Pipeline Components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_component_status_with_http_info(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data46 data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_component_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_component_status`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_component_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/notifymm/{modelmonitor}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_datasets_list(self, modelmonitor, **kwargs):  # noqa: E501
        """API to list datasets for a specific modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_datasets_list(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_datasets_list_with_http_info(modelmonitor, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_datasets_list_with_http_info(modelmonitor, **kwargs)  # noqa: E501
            return data

    def modelmonitor_datasets_list_with_http_info(self, modelmonitor, **kwargs):  # noqa: E501
        """API to list datasets for a specific modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_datasets_list_with_http_info(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_datasets_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_datasets_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_delete(self, data, **kwargs):  # noqa: E501
        """API to delete modelmonitors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_delete(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data44 data: (required)
        :param bool force:
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_delete_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_delete_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_delete_with_http_info(self, data, **kwargs):  # noqa: E501
        """API to delete modelmonitors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_delete_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Data44 data: (required)
        :param bool force:
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitors', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelmonitorApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_delete_alerts(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to delete modelmonitor alerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_delete_alerts(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: (required)
        :param Data51 data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_delete_alerts_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_delete_alerts_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_delete_alerts_with_http_info(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to delete modelmonitor alerts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_delete_alerts_with_http_info(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: (required)
        :param Data51 data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_delete_alerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_delete_alerts`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_delete_alerts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/alerts', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelmonitorApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_delete_datasets(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to delete modelmonitor datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_delete_datasets(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data48 data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_delete_datasets_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_delete_datasets_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_delete_datasets_with_http_info(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to delete modelmonitor datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_delete_datasets_with_http_info(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data48 data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_delete_datasets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_delete_datasets`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_delete_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/datasets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelmonitorApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_get(self, modelmonitor, **kwargs):  # noqa: E501
        """API to get modelmonitor configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_get(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_get_with_http_info(modelmonitor, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_get_with_http_info(modelmonitor, **kwargs)  # noqa: E501
            return data

    def modelmonitor_get_with_http_info(self, modelmonitor, **kwargs):  # noqa: E501
        """API to get modelmonitor configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_get_with_http_info(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_get_features(self, modelmonitor, **kwargs):  # noqa: E501
        """API to get features from the training dataset. This is only valid for columnar data and returns the column names.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_get_features(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: (required)
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_get_features_with_http_info(modelmonitor, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_get_features_with_http_info(modelmonitor, **kwargs)  # noqa: E501
            return data

    def modelmonitor_get_features_with_http_info(self, modelmonitor, **kwargs):  # noqa: E501
        """API to get features from the training dataset. This is only valid for columnar data and returns the column names.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_get_features_with_http_info(modelmonitor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: (required)
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_get_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_get_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_get_metrics_template(self, **kwargs):  # noqa: E501
        """API to get metrics templates. Each template shows the list of metrics supported for a specific model category such as classification, regression etc.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_get_metrics_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_get_metrics_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_get_metrics_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def modelmonitor_get_metrics_template_with_http_info(self, **kwargs):  # noqa: E501
        """API to get metrics templates. Each template shows the list of metrics supported for a specific model category such as classification, regression etc.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_get_metrics_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_get_metrics_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/metrics_template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_ids(self, modelmonitors, **kwargs):  # noqa: E501
        """API to Get modelmonitor IDS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_ids(modelmonitors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitors: Comma separated name of modelmonitors (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_ids_with_http_info(modelmonitors, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_ids_with_http_info(modelmonitors, **kwargs)  # noqa: E501
            return data

    def modelmonitor_ids_with_http_info(self, modelmonitors, **kwargs):  # noqa: E501
        """API to Get modelmonitor IDS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_ids_with_http_info(modelmonitors, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitors: Comma separated name of modelmonitors (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitors']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitors' is set
        if ('modelmonitors' not in params or
                params['modelmonitors'] is None):
            raise ValueError("Missing the required parameter `modelmonitors` when calling `modelmonitor_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modelmonitors' in params:
            query_params.append(('modelmonitors', params['modelmonitors']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_list(self, **kwargs):  # noqa: E501
        """API to list model monitors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tags:
        :param int page:
        :param bool archived:
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def modelmonitor_list_with_http_info(self, **kwargs):  # noqa: E501
        """API to list model monitors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tags:
        :param int page:
        :param bool archived:
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tags', 'page', 'archived']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_state(self, modelmonitor, state, **kwargs):  # noqa: E501
        """API to start or stop modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_state(modelmonitor, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str state: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_state_with_http_info(modelmonitor, state, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_state_with_http_info(modelmonitor, state, **kwargs)  # noqa: E501
            return data

    def modelmonitor_state_with_http_info(self, modelmonitor, state, **kwargs):  # noqa: E501
        """API to start or stop modelmonitor  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_state_with_http_info(modelmonitor, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str state: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_state`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `modelmonitor_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/{state}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_update(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to update modelmonitor configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_update(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data45 data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_update_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_update_with_http_info(modelmonitor, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_update_with_http_info(self, modelmonitor, data, **kwargs):  # noqa: E501
        """API to update modelmonitor configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_update_with_http_info(modelmonitor, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param Data45 data: (required)
        :return: ModelmonitorApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelmonitorApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_update_alert(self, modelmonitor, alert, data, **kwargs):  # noqa: E501
        """API to update modelmonitor alert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_update_alert(modelmonitor, alert, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str alert: ID of Alert (required)
        :param Data49 data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_update_alert_with_http_info(modelmonitor, alert, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_update_alert_with_http_info(modelmonitor, alert, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_update_alert_with_http_info(self, modelmonitor, alert, data, **kwargs):  # noqa: E501
        """API to update modelmonitor alert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_update_alert_with_http_info(modelmonitor, alert, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str alert: ID of Alert (required)
        :param Data49 data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'alert', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_update_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_update_alert`")  # noqa: E501
        # verify the required parameter 'alert' is set
        if ('alert' not in params or
                params['alert'] is None):
            raise ValueError("Missing the required parameter `alert` when calling `modelmonitor_update_alert`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_update_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501
        if 'alert' in params:
            path_params['alert'] = params['alert']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/alert/{alert}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modelmonitor_update_dataset(self, modelmonitor, dataset, data, **kwargs):  # noqa: E501
        """API to update modelmonitor dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_update_dataset(modelmonitor, dataset, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str dataset: ID of Dataset (required)
        :param ModelmonitorUpdateDatasetDef data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modelmonitor_update_dataset_with_http_info(modelmonitor, dataset, data, **kwargs)  # noqa: E501
        else:
            (data) = self.modelmonitor_update_dataset_with_http_info(modelmonitor, dataset, data, **kwargs)  # noqa: E501
            return data

    def modelmonitor_update_dataset_with_http_info(self, modelmonitor, dataset, data, **kwargs):  # noqa: E501
        """API to update modelmonitor dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modelmonitor_update_dataset_with_http_info(modelmonitor, dataset, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modelmonitor: ID of modelmonitor (required)
        :param str dataset: ID of Dataset (required)
        :param ModelmonitorUpdateDatasetDef data: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelmonitor', 'dataset', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modelmonitor_update_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modelmonitor' is set
        if ('modelmonitor' not in params or
                params['modelmonitor'] is None):
            raise ValueError("Missing the required parameter `modelmonitor` when calling `modelmonitor_update_dataset`")  # noqa: E501
        # verify the required parameter 'dataset' is set
        if ('dataset' not in params or
                params['dataset'] is None):
            raise ValueError("Missing the required parameter `dataset` when calling `modelmonitor_update_dataset`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `modelmonitor_update_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'modelmonitor' in params:
            path_params['modelmonitor'] = params['modelmonitor']  # noqa: E501
        if 'dataset' in params:
            path_params['dataset'] = params['dataset']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/keyauth.api.v1+json', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['d3apikey']  # noqa: E501

        return self.api_client.call_api(
            '/modelmonitor/{modelmonitor}/dataset/{dataset}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
