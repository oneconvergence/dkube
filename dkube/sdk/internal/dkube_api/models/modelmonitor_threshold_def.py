# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.5.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelmonitorThresholdDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'baseline': 'float',
        'soft': 'float',
        'hard': 'float'
    }

    attribute_map = {
        'type': 'type',
        'baseline': 'baseline',
        'soft': 'soft',
        'hard': 'hard'
    }

    def __init__(self, type=None, baseline=None, soft=None, hard=None):  # noqa: E501
        """ModelmonitorThresholdDef - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._baseline = None
        self._soft = None
        self._hard = None
        self.discriminator = None

        self.type = type
        if baseline is not None:
            self.baseline = baseline
        self.soft = soft
        self.hard = hard

    @property
    def type(self):
        """Gets the type of this ModelmonitorThresholdDef.  # noqa: E501


        :return: The type of this ModelmonitorThresholdDef.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelmonitorThresholdDef.


        :param type: The type of this ModelmonitorThresholdDef.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["health", "drift", "performance"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def baseline(self):
        """Gets the baseline of this ModelmonitorThresholdDef.  # noqa: E501


        :return: The baseline of this ModelmonitorThresholdDef.  # noqa: E501
        :rtype: float
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this ModelmonitorThresholdDef.


        :param baseline: The baseline of this ModelmonitorThresholdDef.  # noqa: E501
        :type: float
        """

        self._baseline = baseline

    @property
    def soft(self):
        """Gets the soft of this ModelmonitorThresholdDef.  # noqa: E501


        :return: The soft of this ModelmonitorThresholdDef.  # noqa: E501
        :rtype: float
        """
        return self._soft

    @soft.setter
    def soft(self, soft):
        """Sets the soft of this ModelmonitorThresholdDef.


        :param soft: The soft of this ModelmonitorThresholdDef.  # noqa: E501
        :type: float
        """
        if soft is None:
            raise ValueError("Invalid value for `soft`, must not be `None`")  # noqa: E501

        self._soft = soft

    @property
    def hard(self):
        """Gets the hard of this ModelmonitorThresholdDef.  # noqa: E501


        :return: The hard of this ModelmonitorThresholdDef.  # noqa: E501
        :rtype: float
        """
        return self._hard

    @hard.setter
    def hard(self, hard):
        """Sets the hard of this ModelmonitorThresholdDef.


        :param hard: The hard of this ModelmonitorThresholdDef.  # noqa: E501
        :type: float
        """
        if hard is None:
            raise ValueError("Invalid value for `hard`, must not be `None`")  # noqa: E501

        self._hard = hard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelmonitorThresholdDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelmonitorThresholdDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
