# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelmonitorDefaultThresholdDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'threshold': 'float',
        'percent_threshold': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'threshold': 'threshold',
        'percent_threshold': 'percent_threshold'
    }

    def __init__(self, id=None, name=None, type=None, threshold=None, percent_threshold=None):  # noqa: E501
        """ModelmonitorDefaultThresholdDef - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._threshold = None
        self._percent_threshold = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.type = type
        if threshold is not None:
            self.threshold = threshold
        if percent_threshold is not None:
            self.percent_threshold = percent_threshold

    @property
    def id(self):
        """Gets the id of this ModelmonitorDefaultThresholdDef.  # noqa: E501

        UUID4 id for the resource  # noqa: E501

        :return: The id of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelmonitorDefaultThresholdDef.

        UUID4 id for the resource  # noqa: E501

        :param id: The id of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelmonitorDefaultThresholdDef.  # noqa: E501

        Name of the threshold  # noqa: E501

        :return: The name of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelmonitorDefaultThresholdDef.

        Name of the threshold  # noqa: E501

        :param name: The name of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ModelmonitorDefaultThresholdDef.  # noqa: E501


        :return: The type of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelmonitorDefaultThresholdDef.


        :param type: The type of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["performance_threshold", "feature_threshold", "prediction_threshold"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def threshold(self):
        """Gets the threshold of this ModelmonitorDefaultThresholdDef.  # noqa: E501


        :return: The threshold of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ModelmonitorDefaultThresholdDef.


        :param threshold: The threshold of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    @property
    def percent_threshold(self):
        """Gets the percent_threshold of this ModelmonitorDefaultThresholdDef.  # noqa: E501


        :return: The percent_threshold of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :rtype: int
        """
        return self._percent_threshold

    @percent_threshold.setter
    def percent_threshold(self, percent_threshold):
        """Sets the percent_threshold of this ModelmonitorDefaultThresholdDef.


        :param percent_threshold: The percent_threshold of this ModelmonitorDefaultThresholdDef.  # noqa: E501
        :type: int
        """

        self._percent_threshold = percent_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelmonitorDefaultThresholdDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelmonitorDefaultThresholdDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
