# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.5.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Data16(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'version': 'str',
        'code': 'str',
        'commit': 'str',
        'registry': 'str',
        'image_name': 'str',
        'image_tag': 'str'
    }

    attribute_map = {
        'model': 'model',
        'version': 'version',
        'code': 'code',
        'commit': 'commit',
        'registry': 'registry',
        'image_name': 'image_name',
        'image_tag': 'image_tag'
    }

    def __init__(self, model=None, version=None, code=None, commit=None, registry=None, image_name=None, image_tag=None):  # noqa: E501
        """Data16 - a model defined in Swagger"""  # noqa: E501

        self._model = None
        self._version = None
        self._code = None
        self._commit = None
        self._registry = None
        self._image_name = None
        self._image_tag = None
        self.discriminator = None

        if model is not None:
            self.model = model
        if version is not None:
            self.version = version
        if code is not None:
            self.code = code
        if commit is not None:
            self.commit = commit
        if registry is not None:
            self.registry = registry
        if image_name is not None:
            self.image_name = image_name
        if image_tag is not None:
            self.image_tag = image_tag

    @property
    def model(self):
        """Gets the model of this Data16.  # noqa: E501


        :return: The model of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Data16.


        :param model: The model of this Data16.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def version(self):
        """Gets the version of this Data16.  # noqa: E501


        :return: The version of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Data16.


        :param version: The version of this Data16.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def code(self):
        """Gets the code of this Data16.  # noqa: E501


        :return: The code of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Data16.


        :param code: The code of this Data16.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def commit(self):
        """Gets the commit of this Data16.  # noqa: E501


        :return: The commit of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Data16.


        :param commit: The commit of this Data16.  # noqa: E501
        :type: str
        """

        self._commit = commit

    @property
    def registry(self):
        """Gets the registry of this Data16.  # noqa: E501


        :return: The registry of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this Data16.


        :param registry: The registry of this Data16.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def image_name(self):
        """Gets the image_name of this Data16.  # noqa: E501


        :return: The image_name of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this Data16.


        :param image_name: The image_name of this Data16.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def image_tag(self):
        """Gets the image_tag of this Data16.  # noqa: E501


        :return: The image_tag of this Data16.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this Data16.


        :param image_tag: The image_tag of this Data16.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Data16, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data16):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
