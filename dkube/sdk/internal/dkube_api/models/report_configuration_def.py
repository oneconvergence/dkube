# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.5.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportConfigurationDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'long_term_frequency': 'int',
        'short_term_frequency': 'int',
        'title': 'str',
        'emails': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'enabled': 'bool',
        'long_term_report_exist': 'bool',
        'short_term_report_exist': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'long_term_frequency': 'long_term_frequency',
        'short_term_frequency': 'short_term_frequency',
        'title': 'title',
        'emails': 'emails',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'enabled': 'enabled',
        'long_term_report_exist': 'long_term_report_exist',
        'short_term_report_exist': 'short_term_report_exist'
    }

    def __init__(self, name=None, id=None, long_term_frequency=None, short_term_frequency=None, title=None, emails=None, created_at=None, updated_at=None, enabled=None, long_term_report_exist=None, short_term_report_exist=None):  # noqa: E501
        """ReportConfigurationDef - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._id = None
        self._long_term_frequency = None
        self._short_term_frequency = None
        self._title = None
        self._emails = None
        self._created_at = None
        self._updated_at = None
        self._enabled = None
        self._long_term_report_exist = None
        self._short_term_report_exist = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if long_term_frequency is not None:
            self.long_term_frequency = long_term_frequency
        if short_term_frequency is not None:
            self.short_term_frequency = short_term_frequency
        if title is not None:
            self.title = title
        if emails is not None:
            self.emails = emails
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if enabled is not None:
            self.enabled = enabled
        if long_term_report_exist is not None:
            self.long_term_report_exist = long_term_report_exist
        if short_term_report_exist is not None:
            self.short_term_report_exist = short_term_report_exist

    @property
    def name(self):
        """Gets the name of this ReportConfigurationDef.  # noqa: E501


        :return: The name of this ReportConfigurationDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportConfigurationDef.


        :param name: The name of this ReportConfigurationDef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ReportConfigurationDef.  # noqa: E501


        :return: The id of this ReportConfigurationDef.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportConfigurationDef.


        :param id: The id of this ReportConfigurationDef.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def long_term_frequency(self):
        """Gets the long_term_frequency of this ReportConfigurationDef.  # noqa: E501

        frequency in days  # noqa: E501

        :return: The long_term_frequency of this ReportConfigurationDef.  # noqa: E501
        :rtype: int
        """
        return self._long_term_frequency

    @long_term_frequency.setter
    def long_term_frequency(self, long_term_frequency):
        """Sets the long_term_frequency of this ReportConfigurationDef.

        frequency in days  # noqa: E501

        :param long_term_frequency: The long_term_frequency of this ReportConfigurationDef.  # noqa: E501
        :type: int
        """

        self._long_term_frequency = long_term_frequency

    @property
    def short_term_frequency(self):
        """Gets the short_term_frequency of this ReportConfigurationDef.  # noqa: E501

        frequency in minutes  # noqa: E501

        :return: The short_term_frequency of this ReportConfigurationDef.  # noqa: E501
        :rtype: int
        """
        return self._short_term_frequency

    @short_term_frequency.setter
    def short_term_frequency(self, short_term_frequency):
        """Sets the short_term_frequency of this ReportConfigurationDef.

        frequency in minutes  # noqa: E501

        :param short_term_frequency: The short_term_frequency of this ReportConfigurationDef.  # noqa: E501
        :type: int
        """

        self._short_term_frequency = short_term_frequency

    @property
    def title(self):
        """Gets the title of this ReportConfigurationDef.  # noqa: E501

        report title  # noqa: E501

        :return: The title of this ReportConfigurationDef.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportConfigurationDef.

        report title  # noqa: E501

        :param title: The title of this ReportConfigurationDef.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def emails(self):
        """Gets the emails of this ReportConfigurationDef.  # noqa: E501

        comma separated email string  # noqa: E501

        :return: The emails of this ReportConfigurationDef.  # noqa: E501
        :rtype: str
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ReportConfigurationDef.

        comma separated email string  # noqa: E501

        :param emails: The emails of this ReportConfigurationDef.  # noqa: E501
        :type: str
        """

        self._emails = emails

    @property
    def created_at(self):
        """Gets the created_at of this ReportConfigurationDef.  # noqa: E501


        :return: The created_at of this ReportConfigurationDef.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReportConfigurationDef.


        :param created_at: The created_at of this ReportConfigurationDef.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ReportConfigurationDef.  # noqa: E501


        :return: The updated_at of this ReportConfigurationDef.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ReportConfigurationDef.


        :param updated_at: The updated_at of this ReportConfigurationDef.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def enabled(self):
        """Gets the enabled of this ReportConfigurationDef.  # noqa: E501


        :return: The enabled of this ReportConfigurationDef.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ReportConfigurationDef.


        :param enabled: The enabled of this ReportConfigurationDef.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def long_term_report_exist(self):
        """Gets the long_term_report_exist of this ReportConfigurationDef.  # noqa: E501


        :return: The long_term_report_exist of this ReportConfigurationDef.  # noqa: E501
        :rtype: bool
        """
        return self._long_term_report_exist

    @long_term_report_exist.setter
    def long_term_report_exist(self, long_term_report_exist):
        """Sets the long_term_report_exist of this ReportConfigurationDef.


        :param long_term_report_exist: The long_term_report_exist of this ReportConfigurationDef.  # noqa: E501
        :type: bool
        """

        self._long_term_report_exist = long_term_report_exist

    @property
    def short_term_report_exist(self):
        """Gets the short_term_report_exist of this ReportConfigurationDef.  # noqa: E501


        :return: The short_term_report_exist of this ReportConfigurationDef.  # noqa: E501
        :rtype: bool
        """
        return self._short_term_report_exist

    @short_term_report_exist.setter
    def short_term_report_exist(self, short_term_report_exist):
        """Sets the short_term_report_exist of this ReportConfigurationDef.


        :param short_term_report_exist: The short_term_report_exist of this ReportConfigurationDef.  # noqa: E501
        :type: bool
        """

        self._short_term_report_exist = short_term_report_exist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportConfigurationDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportConfigurationDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
