# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Data44(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'alerts': 'list[ModelmonitorAlertDef]',
        'version': 'str',
        'tags': 'list[str]',
        'endpoint_url': 'str',
        'model': 'str',
        'description': 'str',
        'schema': 'ModelmonitorFeaturesSpecDef',
        'model_type': 'str',
        'model_category': 'str',
        'datasources': 'dict(str, ModelmonitorDataSourceDef)',
        'deployment_monitoring': 'DeploymentMonitoringDef',
        'drift_monitoring': 'DriftMonitoringDef',
        'performance_monitoring': 'PerformanceMonitoringDef'
    }

    attribute_map = {
        'name': 'name',
        'alerts': 'alerts',
        'version': 'version',
        'tags': 'tags',
        'endpoint_url': 'endpoint_url',
        'model': 'model',
        'description': 'description',
        'schema': 'schema',
        'model_type': 'model_type',
        'model_category': 'model_category',
        'datasources': 'datasources',
        'deployment_monitoring': 'deployment_monitoring',
        'drift_monitoring': 'drift_monitoring',
        'performance_monitoring': 'performance_monitoring'
    }

    def __init__(self, name=None, alerts=None, version=None, tags=None, endpoint_url=None, model=None, description=None, schema=None, model_type=None, model_category=None, datasources=None, deployment_monitoring=None, drift_monitoring=None, performance_monitoring=None):  # noqa: E501
        """Data44 - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._alerts = None
        self._version = None
        self._tags = None
        self._endpoint_url = None
        self._model = None
        self._description = None
        self._schema = None
        self._model_type = None
        self._model_category = None
        self._datasources = None
        self._deployment_monitoring = None
        self._drift_monitoring = None
        self._performance_monitoring = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if alerts is not None:
            self.alerts = alerts
        if version is not None:
            self.version = version
        if tags is not None:
            self.tags = tags
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url
        if model is not None:
            self.model = model
        if description is not None:
            self.description = description
        if schema is not None:
            self.schema = schema
        if model_type is not None:
            self.model_type = model_type
        if model_category is not None:
            self.model_category = model_category
        if datasources is not None:
            self.datasources = datasources
        if deployment_monitoring is not None:
            self.deployment_monitoring = deployment_monitoring
        if drift_monitoring is not None:
            self.drift_monitoring = drift_monitoring
        if performance_monitoring is not None:
            self.performance_monitoring = performance_monitoring

    @property
    def name(self):
        """Gets the name of this Data44.  # noqa: E501


        :return: The name of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Data44.


        :param name: The name of this Data44.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def alerts(self):
        """Gets the alerts of this Data44.  # noqa: E501

        model monitor alerts  # noqa: E501

        :return: The alerts of this Data44.  # noqa: E501
        :rtype: list[ModelmonitorAlertDef]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this Data44.

        model monitor alerts  # noqa: E501

        :param alerts: The alerts of this Data44.  # noqa: E501
        :type: list[ModelmonitorAlertDef]
        """

        self._alerts = alerts

    @property
    def version(self):
        """Gets the version of this Data44.  # noqa: E501

        Model Version  # noqa: E501

        :return: The version of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Data44.

        Model Version  # noqa: E501

        :param version: The version of this Data44.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def tags(self):
        """Gets the tags of this Data44.  # noqa: E501


        :return: The tags of this Data44.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Data44.


        :param tags: The tags of this Data44.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this Data44.  # noqa: E501

        Model Deploymeny URL  # noqa: E501

        :return: The endpoint_url of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this Data44.

        Model Deploymeny URL  # noqa: E501

        :param endpoint_url: The endpoint_url of this Data44.  # noqa: E501
        :type: str
        """
        if endpoint_url is not None and len(endpoint_url) > 255:
            raise ValueError("Invalid value for `endpoint_url`, length must be less than or equal to `255`")  # noqa: E501

        self._endpoint_url = endpoint_url

    @property
    def model(self):
        """Gets the model of this Data44.  # noqa: E501


        :return: The model of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Data44.


        :param model: The model of this Data44.  # noqa: E501
        :type: str
        """
        if model is not None and len(model) > 255:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `255`")  # noqa: E501

        self._model = model

    @property
    def description(self):
        """Gets the description of this Data44.  # noqa: E501


        :return: The description of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Data44.


        :param description: The description of this Data44.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def schema(self):
        """Gets the schema of this Data44.  # noqa: E501


        :return: The schema of this Data44.  # noqa: E501
        :rtype: ModelmonitorFeaturesSpecDef
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Data44.


        :param schema: The schema of this Data44.  # noqa: E501
        :type: ModelmonitorFeaturesSpecDef
        """

        self._schema = schema

    @property
    def model_type(self):
        """Gets the model_type of this Data44.  # noqa: E501

        Model prediction type - regression or classification  # noqa: E501

        :return: The model_type of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Data44.

        Model prediction type - regression or classification  # noqa: E501

        :param model_type: The model_type of this Data44.  # noqa: E501
        :type: str
        """
        allowed_values = ["regression", "classification"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def model_category(self):
        """Gets the model_category of this Data44.  # noqa: E501

        Model category - TimeSeries, or Other  # noqa: E501

        :return: The model_category of this Data44.  # noqa: E501
        :rtype: str
        """
        return self._model_category

    @model_category.setter
    def model_category(self, model_category):
        """Sets the model_category of this Data44.

        Model category - TimeSeries, or Other  # noqa: E501

        :param model_category: The model_category of this Data44.  # noqa: E501
        :type: str
        """
        allowed_values = ["time_series", "other"]  # noqa: E501
        if model_category not in allowed_values:
            raise ValueError(
                "Invalid value for `model_category` ({0}), must be one of {1}"  # noqa: E501
                .format(model_category, allowed_values)
            )

        self._model_category = model_category

    @property
    def datasources(self):
        """Gets the datasources of this Data44.  # noqa: E501

        model monitor datasources  # noqa: E501

        :return: The datasources of this Data44.  # noqa: E501
        :rtype: dict(str, ModelmonitorDataSourceDef)
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this Data44.

        model monitor datasources  # noqa: E501

        :param datasources: The datasources of this Data44.  # noqa: E501
        :type: dict(str, ModelmonitorDataSourceDef)
        """

        self._datasources = datasources

    @property
    def deployment_monitoring(self):
        """Gets the deployment_monitoring of this Data44.  # noqa: E501


        :return: The deployment_monitoring of this Data44.  # noqa: E501
        :rtype: DeploymentMonitoringDef
        """
        return self._deployment_monitoring

    @deployment_monitoring.setter
    def deployment_monitoring(self, deployment_monitoring):
        """Sets the deployment_monitoring of this Data44.


        :param deployment_monitoring: The deployment_monitoring of this Data44.  # noqa: E501
        :type: DeploymentMonitoringDef
        """

        self._deployment_monitoring = deployment_monitoring

    @property
    def drift_monitoring(self):
        """Gets the drift_monitoring of this Data44.  # noqa: E501


        :return: The drift_monitoring of this Data44.  # noqa: E501
        :rtype: DriftMonitoringDef
        """
        return self._drift_monitoring

    @drift_monitoring.setter
    def drift_monitoring(self, drift_monitoring):
        """Sets the drift_monitoring of this Data44.


        :param drift_monitoring: The drift_monitoring of this Data44.  # noqa: E501
        :type: DriftMonitoringDef
        """

        self._drift_monitoring = drift_monitoring

    @property
    def performance_monitoring(self):
        """Gets the performance_monitoring of this Data44.  # noqa: E501


        :return: The performance_monitoring of this Data44.  # noqa: E501
        :rtype: PerformanceMonitoringDef
        """
        return self._performance_monitoring

    @performance_monitoring.setter
    def performance_monitoring(self, performance_monitoring):
        """Sets the performance_monitoring of this Data44.


        :param performance_monitoring: The performance_monitoring of this Data44.  # noqa: E501
        :type: PerformanceMonitoringDef
        """

        self._performance_monitoring = performance_monitoring

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Data44, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Data44):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
