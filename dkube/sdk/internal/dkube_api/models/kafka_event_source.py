# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.8.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KafkaEventSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brokers': 'str',
        'topics': 'str',
        'group': 'str',
        'lag_threshold': 'int',
        'max_consumers': 'int',
        'allow_idle_consumers': 'bool'
    }

    attribute_map = {
        'brokers': 'brokers',
        'topics': 'topics',
        'group': 'group',
        'lag_threshold': 'lagThreshold',
        'max_consumers': 'maxConsumers',
        'allow_idle_consumers': 'allowIdleConsumers'
    }

    def __init__(self, brokers=None, topics=None, group=None, lag_threshold=None, max_consumers=None, allow_idle_consumers=None):  # noqa: E501
        """KafkaEventSource - a model defined in Swagger"""  # noqa: E501

        self._brokers = None
        self._topics = None
        self._group = None
        self._lag_threshold = None
        self._max_consumers = None
        self._allow_idle_consumers = None
        self.discriminator = None

        if brokers is not None:
            self.brokers = brokers
        if topics is not None:
            self.topics = topics
        if group is not None:
            self.group = group
        if lag_threshold is not None:
            self.lag_threshold = lag_threshold
        if max_consumers is not None:
            self.max_consumers = max_consumers
        if allow_idle_consumers is not None:
            self.allow_idle_consumers = allow_idle_consumers

    @property
    def brokers(self):
        """Gets the brokers of this KafkaEventSource.  # noqa: E501


        :return: The brokers of this KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this KafkaEventSource.


        :param brokers: The brokers of this KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._brokers = brokers

    @property
    def topics(self):
        """Gets the topics of this KafkaEventSource.  # noqa: E501


        :return: The topics of this KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this KafkaEventSource.


        :param topics: The topics of this KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._topics = topics

    @property
    def group(self):
        """Gets the group of this KafkaEventSource.  # noqa: E501


        :return: The group of this KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this KafkaEventSource.


        :param group: The group of this KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def lag_threshold(self):
        """Gets the lag_threshold of this KafkaEventSource.  # noqa: E501


        :return: The lag_threshold of this KafkaEventSource.  # noqa: E501
        :rtype: int
        """
        return self._lag_threshold

    @lag_threshold.setter
    def lag_threshold(self, lag_threshold):
        """Sets the lag_threshold of this KafkaEventSource.


        :param lag_threshold: The lag_threshold of this KafkaEventSource.  # noqa: E501
        :type: int
        """

        self._lag_threshold = lag_threshold

    @property
    def max_consumers(self):
        """Gets the max_consumers of this KafkaEventSource.  # noqa: E501


        :return: The max_consumers of this KafkaEventSource.  # noqa: E501
        :rtype: int
        """
        return self._max_consumers

    @max_consumers.setter
    def max_consumers(self, max_consumers):
        """Sets the max_consumers of this KafkaEventSource.


        :param max_consumers: The max_consumers of this KafkaEventSource.  # noqa: E501
        :type: int
        """

        self._max_consumers = max_consumers

    @property
    def allow_idle_consumers(self):
        """Gets the allow_idle_consumers of this KafkaEventSource.  # noqa: E501


        :return: The allow_idle_consumers of this KafkaEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._allow_idle_consumers

    @allow_idle_consumers.setter
    def allow_idle_consumers(self, allow_idle_consumers):
        """Sets the allow_idle_consumers of this KafkaEventSource.


        :param allow_idle_consumers: The allow_idle_consumers of this KafkaEventSource.  # noqa: E501
        :type: bool
        """

        self._allow_idle_consumers = allow_idle_consumers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KafkaEventSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KafkaEventSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
