# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ModelmonitorMetricSourceDef(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collect_metrics': 'bool',
        'heartbeat': 'bool',
        'endpoint': 'str',
        'protocol': 'str',
        'payload': 'str',
        'headers': 'dict(str, str)',
        'response_status_code': 'str',
        'response_body': 'str'
    }

    attribute_map = {
        'collect_metrics': 'collect_metrics',
        'heartbeat': 'heartbeat',
        'endpoint': 'endpoint',
        'protocol': 'protocol',
        'payload': 'payload',
        'headers': 'headers',
        'response_status_code': 'response_status_code',
        'response_body': 'response_body'
    }

    def __init__(self, collect_metrics=None, heartbeat=None, endpoint=None, protocol=None, payload=None, headers=None, response_status_code=None, response_body=None):  # noqa: E501
        """ModelmonitorMetricSourceDef - a model defined in Swagger"""  # noqa: E501

        self._collect_metrics = None
        self._heartbeat = None
        self._endpoint = None
        self._protocol = None
        self._payload = None
        self._headers = None
        self._response_status_code = None
        self._response_body = None
        self.discriminator = None

        if collect_metrics is not None:
            self.collect_metrics = collect_metrics
        if heartbeat is not None:
            self.heartbeat = heartbeat
        if endpoint is not None:
            self.endpoint = endpoint
        if protocol is not None:
            self.protocol = protocol
        if payload is not None:
            self.payload = payload
        if headers is not None:
            self.headers = headers
        if response_status_code is not None:
            self.response_status_code = response_status_code
        if response_body is not None:
            self.response_body = response_body

    @property
    def collect_metrics(self):
        """Gets the collect_metrics of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The collect_metrics of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: bool
        """
        return self._collect_metrics

    @collect_metrics.setter
    def collect_metrics(self, collect_metrics):
        """Sets the collect_metrics of this ModelmonitorMetricSourceDef.


        :param collect_metrics: The collect_metrics of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: bool
        """

        self._collect_metrics = collect_metrics

    @property
    def heartbeat(self):
        """Gets the heartbeat of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The heartbeat of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: bool
        """
        return self._heartbeat

    @heartbeat.setter
    def heartbeat(self, heartbeat):
        """Sets the heartbeat of this ModelmonitorMetricSourceDef.


        :param heartbeat: The heartbeat of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: bool
        """

        self._heartbeat = heartbeat

    @property
    def endpoint(self):
        """Gets the endpoint of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The endpoint of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ModelmonitorMetricSourceDef.


        :param endpoint: The endpoint of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def protocol(self):
        """Gets the protocol of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The protocol of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ModelmonitorMetricSourceDef.


        :param protocol: The protocol of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["tcp", "http"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def payload(self):
        """Gets the payload of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The payload of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ModelmonitorMetricSourceDef.


        :param payload: The payload of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def headers(self):
        """Gets the headers of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The headers of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ModelmonitorMetricSourceDef.


        :param headers: The headers of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def response_status_code(self):
        """Gets the response_status_code of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The response_status_code of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: str
        """
        return self._response_status_code

    @response_status_code.setter
    def response_status_code(self, response_status_code):
        """Sets the response_status_code of this ModelmonitorMetricSourceDef.


        :param response_status_code: The response_status_code of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: str
        """

        self._response_status_code = response_status_code

    @property
    def response_body(self):
        """Gets the response_body of this ModelmonitorMetricSourceDef.  # noqa: E501


        :return: The response_body of this ModelmonitorMetricSourceDef.  # noqa: E501
        :rtype: str
        """
        return self._response_body

    @response_body.setter
    def response_body(self, response_body):
        """Sets the response_body of this ModelmonitorMetricSourceDef.


        :param response_body: The response_body of this ModelmonitorMetricSourceDef.  # noqa: E501
        :type: str
        """

        self._response_body = response_body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelmonitorMetricSourceDef, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelmonitorMetricSourceDef):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
