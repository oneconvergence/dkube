# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AuthModelSaml(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'sso_url': 'str',
        'ca': 'str',
        'redirect_uri': 'str',
        'entity_issuer': 'str',
        'sso_issuer': 'str',
        'name_attr': 'str',
        'email_attr': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'username': 'username',
        'sso_url': 'ssoUrl',
        'ca': 'ca',
        'redirect_uri': 'redirectURI',
        'entity_issuer': 'entityIssuer',
        'sso_issuer': 'ssoIssuer',
        'name_attr': 'nameAttr',
        'email_attr': 'emailAttr',
        'updated_at': 'updatedAt'
    }

    def __init__(self, username=None, sso_url=None, ca=None, redirect_uri=None, entity_issuer=None, sso_issuer=None, name_attr=None, email_attr=None, updated_at=None):  # noqa: E501
        """AuthModelSaml - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._sso_url = None
        self._ca = None
        self._redirect_uri = None
        self._entity_issuer = None
        self._sso_issuer = None
        self._name_attr = None
        self._email_attr = None
        self._updated_at = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if sso_url is not None:
            self.sso_url = sso_url
        if ca is not None:
            self.ca = ca
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if entity_issuer is not None:
            self.entity_issuer = entity_issuer
        if sso_issuer is not None:
            self.sso_issuer = sso_issuer
        if name_attr is not None:
            self.name_attr = name_attr
        if email_attr is not None:
            self.email_attr = email_attr
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def username(self):
        """Gets the username of this AuthModelSaml.  # noqa: E501

        Name of the valid user. This user must be present in Saml server.  # noqa: E501

        :return: The username of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuthModelSaml.

        Name of the valid user. This user must be present in Saml server.  # noqa: E501

        :param username: The username of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def sso_url(self):
        """Gets the sso_url of this AuthModelSaml.  # noqa: E501

        The URL of the SAML IdP that handles sign-in requests.  # noqa: E501

        :return: The sso_url of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this AuthModelSaml.

        The URL of the SAML IdP that handles sign-in requests.  # noqa: E501

        :param sso_url: The sso_url of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._sso_url = sso_url

    @property
    def ca(self):
        """Gets the ca of this AuthModelSaml.  # noqa: E501

        CA to use when validating the signature of the SAML response.  # noqa: E501

        :return: The ca of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this AuthModelSaml.

        CA to use when validating the signature of the SAML response.  # noqa: E501

        :param ca: The ca of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._ca = ca

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this AuthModelSaml.  # noqa: E501

        Name of the username attribute in the returned assertions to map to ID token claims.  # noqa: E501

        :return: The redirect_uri of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this AuthModelSaml.

        Name of the username attribute in the returned assertions to map to ID token claims.  # noqa: E501

        :param redirect_uri: The redirect_uri of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def entity_issuer(self):
        """Gets the entity_issuer of this AuthModelSaml.  # noqa: E501

        Optional: Manually specify dex's Issuer value.  # noqa: E501

        :return: The entity_issuer of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._entity_issuer

    @entity_issuer.setter
    def entity_issuer(self, entity_issuer):
        """Sets the entity_issuer of this AuthModelSaml.

        Optional: Manually specify dex's Issuer value.  # noqa: E501

        :param entity_issuer: The entity_issuer of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._entity_issuer = entity_issuer

    @property
    def sso_issuer(self):
        """Gets the sso_issuer of this AuthModelSaml.  # noqa: E501

        Optional: Issuer value expected in the SAML response.  # noqa: E501

        :return: The sso_issuer of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._sso_issuer

    @sso_issuer.setter
    def sso_issuer(self, sso_issuer):
        """Sets the sso_issuer of this AuthModelSaml.

        Optional: Issuer value expected in the SAML response.  # noqa: E501

        :param sso_issuer: The sso_issuer of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._sso_issuer = sso_issuer

    @property
    def name_attr(self):
        """Gets the name_attr of this AuthModelSaml.  # noqa: E501

        Name attribute value expected in the SAML response.  # noqa: E501

        :return: The name_attr of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._name_attr

    @name_attr.setter
    def name_attr(self, name_attr):
        """Sets the name_attr of this AuthModelSaml.

        Name attribute value expected in the SAML response.  # noqa: E501

        :param name_attr: The name_attr of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._name_attr = name_attr

    @property
    def email_attr(self):
        """Gets the email_attr of this AuthModelSaml.  # noqa: E501

        Email attribute value expected in the SAML response.  # noqa: E501

        :return: The email_attr of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._email_attr

    @email_attr.setter
    def email_attr(self, email_attr):
        """Sets the email_attr of this AuthModelSaml.

        Email attribute value expected in the SAML response.  # noqa: E501

        :param email_attr: The email_attr of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._email_attr = email_attr

    @property
    def updated_at(self):
        """Gets the updated_at of this AuthModelSaml.  # noqa: E501

        Time at which this provider was migrated to.  # noqa: E501

        :return: The updated_at of this AuthModelSaml.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AuthModelSaml.

        Time at which this provider was migrated to.  # noqa: E501

        :param updated_at: The updated_at of this AuthModelSaml.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthModelSaml, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthModelSaml):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
