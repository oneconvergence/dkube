# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SnowflakeAccessInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'username': 'str',
        'password': 'str',
        'database': 'str',
        'odbc_connection_string': 'str',
        'jdbc_connection_string': 'str',
        'schema': 'str',
        'warehouse': 'str',
        'parameters': 'CustomKVModel'
    }

    attribute_map = {
        'account': 'account',
        'username': 'username',
        'password': 'password',
        'database': 'database',
        'odbc_connection_string': 'ODBCConnectionString',
        'jdbc_connection_string': 'JDBCConnectionString',
        'schema': 'schema',
        'warehouse': 'warehouse',
        'parameters': 'parameters'
    }

    def __init__(self, account=None, username=None, password=None, database=None, odbc_connection_string=None, jdbc_connection_string=None, schema=None, warehouse=None, parameters=None):  # noqa: E501
        """SnowflakeAccessInfo - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._username = None
        self._password = None
        self._database = None
        self._odbc_connection_string = None
        self._jdbc_connection_string = None
        self._schema = None
        self._warehouse = None
        self._parameters = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if database is not None:
            self.database = database
        if odbc_connection_string is not None:
            self.odbc_connection_string = odbc_connection_string
        if jdbc_connection_string is not None:
            self.jdbc_connection_string = jdbc_connection_string
        if schema is not None:
            self.schema = schema
        if warehouse is not None:
            self.warehouse = warehouse
        if parameters is not None:
            self.parameters = parameters

    @property
    def account(self):
        """Gets the account of this SnowflakeAccessInfo.  # noqa: E501


        :return: The account of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SnowflakeAccessInfo.


        :param account: The account of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def username(self):
        """Gets the username of this SnowflakeAccessInfo.  # noqa: E501

        User authorized to connect to snowflake.  # noqa: E501

        :return: The username of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SnowflakeAccessInfo.

        User authorized to connect to snowflake.  # noqa: E501

        :param username: The username of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this SnowflakeAccessInfo.  # noqa: E501

        Password to be used to connect to the database.  # noqa: E501

        :return: The password of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SnowflakeAccessInfo.

        Password to be used to connect to the database.  # noqa: E501

        :param password: The password of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def database(self):
        """Gets the database of this SnowflakeAccessInfo.  # noqa: E501

        Database that this dataset should point to.  # noqa: E501

        :return: The database of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this SnowflakeAccessInfo.

        Database that this dataset should point to.  # noqa: E501

        :param database: The database of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._database = database

    @property
    def odbc_connection_string(self):
        """Gets the odbc_connection_string of this SnowflakeAccessInfo.  # noqa: E501


        :return: The odbc_connection_string of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._odbc_connection_string

    @odbc_connection_string.setter
    def odbc_connection_string(self, odbc_connection_string):
        """Sets the odbc_connection_string of this SnowflakeAccessInfo.


        :param odbc_connection_string: The odbc_connection_string of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._odbc_connection_string = odbc_connection_string

    @property
    def jdbc_connection_string(self):
        """Gets the jdbc_connection_string of this SnowflakeAccessInfo.  # noqa: E501


        :return: The jdbc_connection_string of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._jdbc_connection_string

    @jdbc_connection_string.setter
    def jdbc_connection_string(self, jdbc_connection_string):
        """Sets the jdbc_connection_string of this SnowflakeAccessInfo.


        :param jdbc_connection_string: The jdbc_connection_string of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._jdbc_connection_string = jdbc_connection_string

    @property
    def schema(self):
        """Gets the schema of this SnowflakeAccessInfo.  # noqa: E501


        :return: The schema of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this SnowflakeAccessInfo.


        :param schema: The schema of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def warehouse(self):
        """Gets the warehouse of this SnowflakeAccessInfo.  # noqa: E501


        :return: The warehouse of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: str
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse):
        """Sets the warehouse of this SnowflakeAccessInfo.


        :param warehouse: The warehouse of this SnowflakeAccessInfo.  # noqa: E501
        :type: str
        """

        self._warehouse = warehouse

    @property
    def parameters(self):
        """Gets the parameters of this SnowflakeAccessInfo.  # noqa: E501


        :return: The parameters of this SnowflakeAccessInfo.  # noqa: E501
        :rtype: CustomKVModel
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SnowflakeAccessInfo.


        :param parameters: The parameters of this SnowflakeAccessInfo.  # noqa: E501
        :type: CustomKVModel
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnowflakeAccessInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnowflakeAccessInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
