# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2.2.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'kind': 'str',
        'url': 'str',
        'ca': 'str',
        'version': 'str',
        'auth_type': 'str',
        'jwt_signing_key': 'str',
        'slurm_user': 'str',
        'tags': 'list[str]',
        'description': 'str',
        'plugin': 'str'
    }

    attribute_map = {
        'name': 'name',
        'kind': 'kind',
        'url': 'url',
        'ca': 'ca',
        'version': 'version',
        'auth_type': 'auth_type',
        'jwt_signing_key': 'jwt_signing_key',
        'slurm_user': 'slurm_user',
        'tags': 'tags',
        'description': 'description',
        'plugin': 'plugin'
    }

    def __init__(self, name=None, kind=None, url=None, ca=None, version=None, auth_type=None, jwt_signing_key=None, slurm_user=None, tags=None, description=None, plugin=None):  # noqa: E501
        """Cluster - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._kind = None
        self._url = None
        self._ca = None
        self._version = None
        self._auth_type = None
        self._jwt_signing_key = None
        self._slurm_user = None
        self._tags = None
        self._description = None
        self._plugin = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if kind is not None:
            self.kind = kind
        if url is not None:
            self.url = url
        if ca is not None:
            self.ca = ca
        if version is not None:
            self.version = version
        if auth_type is not None:
            self.auth_type = auth_type
        if jwt_signing_key is not None:
            self.jwt_signing_key = jwt_signing_key
        if slurm_user is not None:
            self.slurm_user = slurm_user
        if tags is not None:
            self.tags = tags
        if description is not None:
            self.description = description
        if plugin is not None:
            self.plugin = plugin

    @property
    def name(self):
        """Gets the name of this Cluster.  # noqa: E501


        :return: The name of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cluster.


        :param name: The name of this Cluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def kind(self):
        """Gets the kind of this Cluster.  # noqa: E501


        :return: The kind of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Cluster.


        :param kind: The kind of this Cluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["kubernetes-local", "slurm-remote"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def url(self):
        """Gets the url of this Cluster.  # noqa: E501

        URL of cluster  # noqa: E501

        :return: The url of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Cluster.

        URL of cluster  # noqa: E501

        :param url: The url of this Cluster.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def ca(self):
        """Gets the ca of this Cluster.  # noqa: E501

        Certificate authority data  # noqa: E501

        :return: The ca of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this Cluster.

        Certificate authority data  # noqa: E501

        :param ca: The ca of this Cluster.  # noqa: E501
        :type: str
        """

        self._ca = ca

    @property
    def version(self):
        """Gets the version of this Cluster.  # noqa: E501

        version of cluster  # noqa: E501

        :return: The version of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Cluster.

        version of cluster  # noqa: E501

        :param version: The version of this Cluster.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def auth_type(self):
        """Gets the auth_type of this Cluster.  # noqa: E501


        :return: The auth_type of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Cluster.


        :param auth_type: The auth_type of this Cluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["jwt"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def jwt_signing_key(self):
        """Gets the jwt_signing_key of this Cluster.  # noqa: E501


        :return: The jwt_signing_key of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._jwt_signing_key

    @jwt_signing_key.setter
    def jwt_signing_key(self, jwt_signing_key):
        """Sets the jwt_signing_key of this Cluster.


        :param jwt_signing_key: The jwt_signing_key of this Cluster.  # noqa: E501
        :type: str
        """

        self._jwt_signing_key = jwt_signing_key

    @property
    def slurm_user(self):
        """Gets the slurm_user of this Cluster.  # noqa: E501


        :return: The slurm_user of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._slurm_user

    @slurm_user.setter
    def slurm_user(self, slurm_user):
        """Sets the slurm_user of this Cluster.


        :param slurm_user: The slurm_user of this Cluster.  # noqa: E501
        :type: str
        """

        self._slurm_user = slurm_user

    @property
    def tags(self):
        """Gets the tags of this Cluster.  # noqa: E501

        Unique tags provided by user  # noqa: E501

        :return: The tags of this Cluster.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Cluster.

        Unique tags provided by user  # noqa: E501

        :param tags: The tags of this Cluster.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def description(self):
        """Gets the description of this Cluster.  # noqa: E501

        User defined description for the cluster  # noqa: E501

        :return: The description of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cluster.

        User defined description for the cluster  # noqa: E501

        :param description: The description of this Cluster.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def plugin(self):
        """Gets the plugin of this Cluster.  # noqa: E501


        :return: The plugin of this Cluster.  # noqa: E501
        :rtype: str
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this Cluster.


        :param plugin: The plugin of this Cluster.  # noqa: E501
        :type: str
        """

        self._plugin = plugin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
