# coding: utf-8

"""
    Dkube api server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.8.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeltaLake(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table_source': 'str',
        'table_path': 'str',
        'accesskeyid': 'str',
        'secretaccesskey': 'str',
        'region': 'str',
        'endpoint': 'str'
    }

    attribute_map = {
        'table_source': 'table_source',
        'table_path': 'table_path',
        'accesskeyid': 'accesskeyid',
        'secretaccesskey': 'secretaccesskey',
        'region': 'region',
        'endpoint': 'endpoint'
    }

    def __init__(self, table_source=None, table_path=None, accesskeyid=None, secretaccesskey=None, region=None, endpoint=None):  # noqa: E501
        """DeltaLake - a model defined in Swagger"""  # noqa: E501

        self._table_source = None
        self._table_path = None
        self._accesskeyid = None
        self._secretaccesskey = None
        self._region = None
        self._endpoint = None
        self.discriminator = None

        if table_source is not None:
            self.table_source = table_source
        if table_path is not None:
            self.table_path = table_path
        if accesskeyid is not None:
            self.accesskeyid = accesskeyid
        if secretaccesskey is not None:
            self.secretaccesskey = secretaccesskey
        if region is not None:
            self.region = region
        if endpoint is not None:
            self.endpoint = endpoint

    @property
    def table_source(self):
        """Gets the table_source of this DeltaLake.  # noqa: E501


        :return: The table_source of this DeltaLake.  # noqa: E501
        :rtype: str
        """
        return self._table_source

    @table_source.setter
    def table_source(self, table_source):
        """Sets the table_source of this DeltaLake.


        :param table_source: The table_source of this DeltaLake.  # noqa: E501
        :type: str
        """
        allowed_values = ["hostpath", "s3"]  # noqa: E501
        if table_source not in allowed_values:
            raise ValueError(
                "Invalid value for `table_source` ({0}), must be one of {1}"  # noqa: E501
                .format(table_source, allowed_values)
            )

        self._table_source = table_source

    @property
    def table_path(self):
        """Gets the table_path of this DeltaLake.  # noqa: E501


        :return: The table_path of this DeltaLake.  # noqa: E501
        :rtype: str
        """
        return self._table_path

    @table_path.setter
    def table_path(self, table_path):
        """Sets the table_path of this DeltaLake.


        :param table_path: The table_path of this DeltaLake.  # noqa: E501
        :type: str
        """

        self._table_path = table_path

    @property
    def accesskeyid(self):
        """Gets the accesskeyid of this DeltaLake.  # noqa: E501


        :return: The accesskeyid of this DeltaLake.  # noqa: E501
        :rtype: str
        """
        return self._accesskeyid

    @accesskeyid.setter
    def accesskeyid(self, accesskeyid):
        """Sets the accesskeyid of this DeltaLake.


        :param accesskeyid: The accesskeyid of this DeltaLake.  # noqa: E501
        :type: str
        """

        self._accesskeyid = accesskeyid

    @property
    def secretaccesskey(self):
        """Gets the secretaccesskey of this DeltaLake.  # noqa: E501


        :return: The secretaccesskey of this DeltaLake.  # noqa: E501
        :rtype: str
        """
        return self._secretaccesskey

    @secretaccesskey.setter
    def secretaccesskey(self, secretaccesskey):
        """Sets the secretaccesskey of this DeltaLake.


        :param secretaccesskey: The secretaccesskey of this DeltaLake.  # noqa: E501
        :type: str
        """

        self._secretaccesskey = secretaccesskey

    @property
    def region(self):
        """Gets the region of this DeltaLake.  # noqa: E501


        :return: The region of this DeltaLake.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DeltaLake.


        :param region: The region of this DeltaLake.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def endpoint(self):
        """Gets the endpoint of this DeltaLake.  # noqa: E501


        :return: The endpoint of this DeltaLake.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this DeltaLake.


        :param endpoint: The endpoint of this DeltaLake.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeltaLake, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeltaLake):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
