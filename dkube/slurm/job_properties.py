# coding: utf-8

"""
    Slurm Rest API

    API to access and control Slurm.  # noqa: E501

    OpenAPI spec version: 0.0.35
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'account_gather_freqency': 'str',
        'argv': 'list[str]',
        'array': 'str',
        'batch_features': 'str',
        'begin_time': 'str',
        'burst_buffer': 'str',
        'cluster_constraints': 'str',
        'comment': 'str',
        'constraints': 'str',
        'core_specification': 'int',
        'cores_per_socket': 'int',
        'cpu_binding': 'str',
        'cpu_binding_hint': 'str',
        'cpu_frequency': 'str',
        'cpus_per_gpu': 'str',
        'cpus_per_task': 'int',
        'current_working_directory': 'str',
        'deadline': 'str',
        'delay_boot': 'int',
        'dependency': 'str',
        'distribution': 'str',
        'environment': 'object',
        'exclusive': 'OneOfjobPropertiesExclusive',
        'get_user_environment': 'bool',
        'gres': 'str',
        'gres_flags': 'str',
        'gpu_binding': 'str',
        'gpu_frequency': 'str',
        'gpus': 'str',
        'gpus_per_node': 'str',
        'gpus_per_socket': 'str',
        'gpus_per_task': 'str',
        'hold': 'bool',
        'kill_on_invalid_dependency': 'bool',
        'licenses': 'str',
        'mail_type': 'str',
        'mail_user': 'str',
        'mcs_label': 'str',
        'memory_binding': 'str',
        'memory_per_cpu': 'int',
        'memory_per_gpu': 'int',
        'memory_per_node': 'int',
        'minimum_cpus_per_node': 'int',
        'minimum_nodes': 'bool',
        'name': 'str',
        'nice': 'str',
        'no_kill': 'bool',
        'nodes': 'OneOfjobPropertiesNodes',
        'open_mode': 'str',
        'partition': 'str',
        'priority': 'str',
        'qos': 'str',
        'requeue': 'bool',
        'reservation': 'str',
        'signal': 'str',
        'sockets_per_node': 'int',
        'spread_job': 'bool',
        'standard_error': 'str',
        'standard_in': 'str',
        'standard_out': 'str',
        'tasks': 'int',
        'tasks_per_core': 'int',
        'tasks_per_node': 'int',
        'tasks_per_socket': 'int',
        'thread_specification': 'int',
        'threads_per_core': 'int',
        'time_limit': 'int',
        'time_minimum': 'int',
        'wait_all_nodes': 'bool',
        'wckey': 'str'
    }

    attribute_map = {
        'account': 'account',
        'account_gather_freqency': 'account_gather_freqency',
        'argv': 'argv',
        'array': 'array',
        'batch_features': 'batch_features',
        'begin_time': 'begin_time',
        'burst_buffer': 'burst_buffer',
        'cluster_constraints': 'cluster_constraints',
        'comment': 'comment',
        'constraints': 'constraints',
        'core_specification': 'core_specification',
        'cores_per_socket': 'cores_per_socket',
        'cpu_binding': 'cpu_binding',
        'cpu_binding_hint': 'cpu_binding_hint',
        'cpu_frequency': 'cpu_frequency',
        'cpus_per_gpu': 'cpus_per_gpu',
        'cpus_per_task': 'cpus_per_task',
        'current_working_directory': 'current_working_directory',
        'deadline': 'deadline',
        'delay_boot': 'delay_boot',
        'dependency': 'dependency',
        'distribution': 'distribution',
        'environment': 'environment',
        'exclusive': 'exclusive',
        'get_user_environment': 'get_user_environment',
        'gres': 'gres',
        'gres_flags': 'gres_flags',
        'gpu_binding': 'gpu_binding',
        'gpu_frequency': 'gpu_frequency',
        'gpus': 'gpus',
        'gpus_per_node': 'gpus_per_node',
        'gpus_per_socket': 'gpus_per_socket',
        'gpus_per_task': 'gpus_per_task',
        'hold': 'hold',
        'kill_on_invalid_dependency': 'kill_on_invalid_dependency',
        'licenses': 'licenses',
        'mail_type': 'mail_type',
        'mail_user': 'mail_user',
        'mcs_label': 'mcs_label',
        'memory_binding': 'memory_binding',
        'memory_per_cpu': 'memory_per_cpu',
        'memory_per_gpu': 'memory_per_gpu',
        'memory_per_node': 'memory_per_node',
        'minimum_cpus_per_node': 'minimum_cpus_per_node',
        'minimum_nodes': 'minimum_nodes',
        'name': 'name',
        'nice': 'nice',
        'no_kill': 'no_kill',
        'nodes': 'nodes',
        'open_mode': 'open_mode',
        'partition': 'partition',
        'priority': 'priority',
        'qos': 'qos',
        'requeue': 'requeue',
        'reservation': 'reservation',
        'signal': 'signal',
        'sockets_per_node': 'sockets_per_node',
        'spread_job': 'spread_job',
        'standard_error': 'standard_error',
        'standard_in': 'standard_in',
        'standard_out': 'standard_out',
        'tasks': 'tasks',
        'tasks_per_core': 'tasks_per_core',
        'tasks_per_node': 'tasks_per_node',
        'tasks_per_socket': 'tasks_per_socket',
        'thread_specification': 'thread_specification',
        'threads_per_core': 'threads_per_core',
        'time_limit': 'time_limit',
        'time_minimum': 'time_minimum',
        'wait_all_nodes': 'wait_all_nodes',
        'wckey': 'wckey'
    }

    def __init__(self, account=None, account_gather_freqency=None, argv=None, array=None, batch_features=None, begin_time=None, burst_buffer=None, cluster_constraints=None, comment=None, constraints=None, core_specification=None, cores_per_socket=None, cpu_binding=None, cpu_binding_hint=None, cpu_frequency=None, cpus_per_gpu=None, cpus_per_task=None, current_working_directory=None, deadline=None, delay_boot=None, dependency=None, distribution=None, environment=None, exclusive=None, get_user_environment=None, gres=None, gres_flags=None, gpu_binding=None, gpu_frequency=None, gpus=None, gpus_per_node=None, gpus_per_socket=None, gpus_per_task=None, hold=None, kill_on_invalid_dependency=None, licenses=None, mail_type=None, mail_user=None, mcs_label=None, memory_binding=None, memory_per_cpu=None, memory_per_gpu=None, memory_per_node=None, minimum_cpus_per_node=None, minimum_nodes=None, name=None, nice=None, no_kill=None, nodes=None, open_mode='append', partition=None, priority=None, qos=None, requeue=None, reservation=None, signal=None, sockets_per_node=None, spread_job=None, standard_error=None, standard_in=None, standard_out=None, tasks=None, tasks_per_core=None, tasks_per_node=None, tasks_per_socket=None, thread_specification=None, threads_per_core=None, time_limit=None, time_minimum=None, wait_all_nodes=None, wckey=None):  # noqa: E501
        """JobProperties - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._account_gather_freqency = None
        self._argv = None
        self._array = None
        self._batch_features = None
        self._begin_time = None
        self._burst_buffer = None
        self._cluster_constraints = None
        self._comment = None
        self._constraints = None
        self._core_specification = None
        self._cores_per_socket = None
        self._cpu_binding = None
        self._cpu_binding_hint = None
        self._cpu_frequency = None
        self._cpus_per_gpu = None
        self._cpus_per_task = None
        self._current_working_directory = None
        self._deadline = None
        self._delay_boot = None
        self._dependency = None
        self._distribution = None
        self._environment = None
        self._exclusive = None
        self._get_user_environment = None
        self._gres = None
        self._gres_flags = None
        self._gpu_binding = None
        self._gpu_frequency = None
        self._gpus = None
        self._gpus_per_node = None
        self._gpus_per_socket = None
        self._gpus_per_task = None
        self._hold = None
        self._kill_on_invalid_dependency = None
        self._licenses = None
        self._mail_type = None
        self._mail_user = None
        self._mcs_label = None
        self._memory_binding = None
        self._memory_per_cpu = None
        self._memory_per_gpu = None
        self._memory_per_node = None
        self._minimum_cpus_per_node = None
        self._minimum_nodes = None
        self._name = None
        self._nice = None
        self._no_kill = None
        self._nodes = None
        self._open_mode = None
        self._partition = None
        self._priority = None
        self._qos = None
        self._requeue = None
        self._reservation = None
        self._signal = None
        self._sockets_per_node = None
        self._spread_job = None
        self._standard_error = None
        self._standard_in = None
        self._standard_out = None
        self._tasks = None
        self._tasks_per_core = None
        self._tasks_per_node = None
        self._tasks_per_socket = None
        self._thread_specification = None
        self._threads_per_core = None
        self._time_limit = None
        self._time_minimum = None
        self._wait_all_nodes = None
        self._wckey = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if account_gather_freqency is not None:
            self.account_gather_freqency = account_gather_freqency
        if argv is not None:
            self.argv = argv
        if array is not None:
            self.array = array
        if batch_features is not None:
            self.batch_features = batch_features
        if begin_time is not None:
            self.begin_time = begin_time
        if burst_buffer is not None:
            self.burst_buffer = burst_buffer
        if cluster_constraints is not None:
            self.cluster_constraints = cluster_constraints
        if comment is not None:
            self.comment = comment
        if constraints is not None:
            self.constraints = constraints
        if core_specification is not None:
            self.core_specification = core_specification
        if cores_per_socket is not None:
            self.cores_per_socket = cores_per_socket
        if cpu_binding is not None:
            self.cpu_binding = cpu_binding
        if cpu_binding_hint is not None:
            self.cpu_binding_hint = cpu_binding_hint
        if cpu_frequency is not None:
            self.cpu_frequency = cpu_frequency
        if cpus_per_gpu is not None:
            self.cpus_per_gpu = cpus_per_gpu
        if cpus_per_task is not None:
            self.cpus_per_task = cpus_per_task
        if current_working_directory is not None:
            self.current_working_directory = current_working_directory
        if deadline is not None:
            self.deadline = deadline
        if delay_boot is not None:
            self.delay_boot = delay_boot
        if dependency is not None:
            self.dependency = dependency
        if distribution is not None:
            self.distribution = distribution
        if environment is not None:
            self.environment = environment
        if exclusive is not None:
            self.exclusive = exclusive
        if get_user_environment is not None:
            self.get_user_environment = get_user_environment
        if gres is not None:
            self.gres = gres
        if gres_flags is not None:
            self.gres_flags = gres_flags
        if gpu_binding is not None:
            self.gpu_binding = gpu_binding
        if gpu_frequency is not None:
            self.gpu_frequency = gpu_frequency
        if gpus is not None:
            self.gpus = gpus
        if gpus_per_node is not None:
            self.gpus_per_node = gpus_per_node
        if gpus_per_socket is not None:
            self.gpus_per_socket = gpus_per_socket
        if gpus_per_task is not None:
            self.gpus_per_task = gpus_per_task
        if hold is not None:
            self.hold = hold
        if kill_on_invalid_dependency is not None:
            self.kill_on_invalid_dependency = kill_on_invalid_dependency
        if licenses is not None:
            self.licenses = licenses
        if mail_type is not None:
            self.mail_type = mail_type
        if mail_user is not None:
            self.mail_user = mail_user
        if mcs_label is not None:
            self.mcs_label = mcs_label
        if memory_binding is not None:
            self.memory_binding = memory_binding
        if memory_per_cpu is not None:
            self.memory_per_cpu = memory_per_cpu
        if memory_per_gpu is not None:
            self.memory_per_gpu = memory_per_gpu
        if memory_per_node is not None:
            self.memory_per_node = memory_per_node
        if minimum_cpus_per_node is not None:
            self.minimum_cpus_per_node = minimum_cpus_per_node
        if minimum_nodes is not None:
            self.minimum_nodes = minimum_nodes
        if name is not None:
            self.name = name
        if nice is not None:
            self.nice = nice
        if no_kill is not None:
            self.no_kill = no_kill
        if nodes is not None:
            self.nodes = nodes
        if open_mode is not None:
            self.open_mode = open_mode
        if partition is not None:
            self.partition = partition
        if priority is not None:
            self.priority = priority
        if qos is not None:
            self.qos = qos
        if requeue is not None:
            self.requeue = requeue
        if reservation is not None:
            self.reservation = reservation
        if signal is not None:
            self.signal = signal
        if sockets_per_node is not None:
            self.sockets_per_node = sockets_per_node
        if spread_job is not None:
            self.spread_job = spread_job
        if standard_error is not None:
            self.standard_error = standard_error
        if standard_in is not None:
            self.standard_in = standard_in
        if standard_out is not None:
            self.standard_out = standard_out
        if tasks is not None:
            self.tasks = tasks
        if tasks_per_core is not None:
            self.tasks_per_core = tasks_per_core
        if tasks_per_node is not None:
            self.tasks_per_node = tasks_per_node
        if tasks_per_socket is not None:
            self.tasks_per_socket = tasks_per_socket
        if thread_specification is not None:
            self.thread_specification = thread_specification
        if threads_per_core is not None:
            self.threads_per_core = threads_per_core
        if time_limit is not None:
            self.time_limit = time_limit
        if time_minimum is not None:
            self.time_minimum = time_minimum
        if wait_all_nodes is not None:
            self.wait_all_nodes = wait_all_nodes
        if wckey is not None:
            self.wckey = wckey

    @property
    def account(self):
        """Gets the account of this JobProperties.  # noqa: E501

        Charge resources used by this job to specified account.  # noqa: E501

        :return: The account of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this JobProperties.

        Charge resources used by this job to specified account.  # noqa: E501

        :param account: The account of this JobProperties.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def account_gather_freqency(self):
        """Gets the account_gather_freqency of this JobProperties.  # noqa: E501

        Define the job accounting and profiling sampling intervals.  # noqa: E501

        :return: The account_gather_freqency of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._account_gather_freqency

    @account_gather_freqency.setter
    def account_gather_freqency(self, account_gather_freqency):
        """Sets the account_gather_freqency of this JobProperties.

        Define the job accounting and profiling sampling intervals.  # noqa: E501

        :param account_gather_freqency: The account_gather_freqency of this JobProperties.  # noqa: E501
        :type: str
        """

        self._account_gather_freqency = account_gather_freqency

    @property
    def argv(self):
        """Gets the argv of this JobProperties.  # noqa: E501

        Arguments to the script.  # noqa: E501

        :return: The argv of this JobProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._argv

    @argv.setter
    def argv(self, argv):
        """Sets the argv of this JobProperties.

        Arguments to the script.  # noqa: E501

        :param argv: The argv of this JobProperties.  # noqa: E501
        :type: list[str]
        """

        self._argv = argv

    @property
    def array(self):
        """Gets the array of this JobProperties.  # noqa: E501

        Submit a job array, multiple jobs to be executed with identical parameters. The indexes specification identifies what array index values should be used.  # noqa: E501

        :return: The array of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this JobProperties.

        Submit a job array, multiple jobs to be executed with identical parameters. The indexes specification identifies what array index values should be used.  # noqa: E501

        :param array: The array of this JobProperties.  # noqa: E501
        :type: str
        """

        self._array = array

    @property
    def batch_features(self):
        """Gets the batch_features of this JobProperties.  # noqa: E501

        features required for batch script's node  # noqa: E501

        :return: The batch_features of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._batch_features

    @batch_features.setter
    def batch_features(self, batch_features):
        """Sets the batch_features of this JobProperties.

        features required for batch script's node  # noqa: E501

        :param batch_features: The batch_features of this JobProperties.  # noqa: E501
        :type: str
        """

        self._batch_features = batch_features

    @property
    def begin_time(self):
        """Gets the begin_time of this JobProperties.  # noqa: E501

        Submit the batch script to the Slurm controller immediately, like normal, but tell the controller to defer the allocation of the job until the specified time.  # noqa: E501

        :return: The begin_time of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this JobProperties.

        Submit the batch script to the Slurm controller immediately, like normal, but tell the controller to defer the allocation of the job until the specified time.  # noqa: E501

        :param begin_time: The begin_time of this JobProperties.  # noqa: E501
        :type: str
        """

        self._begin_time = begin_time

    @property
    def burst_buffer(self):
        """Gets the burst_buffer of this JobProperties.  # noqa: E501

        Burst buffer specification.  # noqa: E501

        :return: The burst_buffer of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._burst_buffer

    @burst_buffer.setter
    def burst_buffer(self, burst_buffer):
        """Sets the burst_buffer of this JobProperties.

        Burst buffer specification.  # noqa: E501

        :param burst_buffer: The burst_buffer of this JobProperties.  # noqa: E501
        :type: str
        """

        self._burst_buffer = burst_buffer

    @property
    def cluster_constraints(self):
        """Gets the cluster_constraints of this JobProperties.  # noqa: E501

        Specifies features that a federated cluster must have to have a sibling job submitted to it.  # noqa: E501

        :return: The cluster_constraints of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._cluster_constraints

    @cluster_constraints.setter
    def cluster_constraints(self, cluster_constraints):
        """Sets the cluster_constraints of this JobProperties.

        Specifies features that a federated cluster must have to have a sibling job submitted to it.  # noqa: E501

        :param cluster_constraints: The cluster_constraints of this JobProperties.  # noqa: E501
        :type: str
        """

        self._cluster_constraints = cluster_constraints

    @property
    def comment(self):
        """Gets the comment of this JobProperties.  # noqa: E501

        An arbitrary comment.  # noqa: E501

        :return: The comment of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this JobProperties.

        An arbitrary comment.  # noqa: E501

        :param comment: The comment of this JobProperties.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def constraints(self):
        """Gets the constraints of this JobProperties.  # noqa: E501

        node features required by job.  # noqa: E501

        :return: The constraints of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobProperties.

        node features required by job.  # noqa: E501

        :param constraints: The constraints of this JobProperties.  # noqa: E501
        :type: str
        """

        self._constraints = constraints

    @property
    def core_specification(self):
        """Gets the core_specification of this JobProperties.  # noqa: E501

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :return: The core_specification of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._core_specification

    @core_specification.setter
    def core_specification(self, core_specification):
        """Sets the core_specification of this JobProperties.

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :param core_specification: The core_specification of this JobProperties.  # noqa: E501
        :type: int
        """

        self._core_specification = core_specification

    @property
    def cores_per_socket(self):
        """Gets the cores_per_socket of this JobProperties.  # noqa: E501

        Restrict node selection to nodes with at least the specified number of cores per socket.  # noqa: E501

        :return: The cores_per_socket of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._cores_per_socket

    @cores_per_socket.setter
    def cores_per_socket(self, cores_per_socket):
        """Sets the cores_per_socket of this JobProperties.

        Restrict node selection to nodes with at least the specified number of cores per socket.  # noqa: E501

        :param cores_per_socket: The cores_per_socket of this JobProperties.  # noqa: E501
        :type: int
        """

        self._cores_per_socket = cores_per_socket

    @property
    def cpu_binding(self):
        """Gets the cpu_binding of this JobProperties.  # noqa: E501

        Cpu binding  # noqa: E501

        :return: The cpu_binding of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._cpu_binding

    @cpu_binding.setter
    def cpu_binding(self, cpu_binding):
        """Sets the cpu_binding of this JobProperties.

        Cpu binding  # noqa: E501

        :param cpu_binding: The cpu_binding of this JobProperties.  # noqa: E501
        :type: str
        """

        self._cpu_binding = cpu_binding

    @property
    def cpu_binding_hint(self):
        """Gets the cpu_binding_hint of this JobProperties.  # noqa: E501

        Cpu binding hint  # noqa: E501

        :return: The cpu_binding_hint of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._cpu_binding_hint

    @cpu_binding_hint.setter
    def cpu_binding_hint(self, cpu_binding_hint):
        """Sets the cpu_binding_hint of this JobProperties.

        Cpu binding hint  # noqa: E501

        :param cpu_binding_hint: The cpu_binding_hint of this JobProperties.  # noqa: E501
        :type: str
        """

        self._cpu_binding_hint = cpu_binding_hint

    @property
    def cpu_frequency(self):
        """Gets the cpu_frequency of this JobProperties.  # noqa: E501

        Request that job steps initiated by srun commands inside this sbatch script be run at some requested frequency if possible, on the CPUs selected for the step on the compute node(s).  # noqa: E501

        :return: The cpu_frequency of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._cpu_frequency

    @cpu_frequency.setter
    def cpu_frequency(self, cpu_frequency):
        """Sets the cpu_frequency of this JobProperties.

        Request that job steps initiated by srun commands inside this sbatch script be run at some requested frequency if possible, on the CPUs selected for the step on the compute node(s).  # noqa: E501

        :param cpu_frequency: The cpu_frequency of this JobProperties.  # noqa: E501
        :type: str
        """

        self._cpu_frequency = cpu_frequency

    @property
    def cpus_per_gpu(self):
        """Gets the cpus_per_gpu of this JobProperties.  # noqa: E501

        Number of CPUs requested per allocated GPU.  # noqa: E501

        :return: The cpus_per_gpu of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._cpus_per_gpu

    @cpus_per_gpu.setter
    def cpus_per_gpu(self, cpus_per_gpu):
        """Sets the cpus_per_gpu of this JobProperties.

        Number of CPUs requested per allocated GPU.  # noqa: E501

        :param cpus_per_gpu: The cpus_per_gpu of this JobProperties.  # noqa: E501
        :type: str
        """

        self._cpus_per_gpu = cpus_per_gpu

    @property
    def cpus_per_task(self):
        """Gets the cpus_per_task of this JobProperties.  # noqa: E501

        Advise the Slurm controller that ensuing job steps will require ncpus number of processors per task.  # noqa: E501

        :return: The cpus_per_task of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._cpus_per_task

    @cpus_per_task.setter
    def cpus_per_task(self, cpus_per_task):
        """Sets the cpus_per_task of this JobProperties.

        Advise the Slurm controller that ensuing job steps will require ncpus number of processors per task.  # noqa: E501

        :param cpus_per_task: The cpus_per_task of this JobProperties.  # noqa: E501
        :type: int
        """

        self._cpus_per_task = cpus_per_task

    @property
    def current_working_directory(self):
        """Gets the current_working_directory of this JobProperties.  # noqa: E501

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :return: The current_working_directory of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._current_working_directory

    @current_working_directory.setter
    def current_working_directory(self, current_working_directory):
        """Sets the current_working_directory of this JobProperties.

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :param current_working_directory: The current_working_directory of this JobProperties.  # noqa: E501
        :type: str
        """

        self._current_working_directory = current_working_directory

    @property
    def deadline(self):
        """Gets the deadline of this JobProperties.  # noqa: E501

        Remove the job if no ending is possible before this deadline (start > (deadline - time[-min])).  # noqa: E501

        :return: The deadline of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this JobProperties.

        Remove the job if no ending is possible before this deadline (start > (deadline - time[-min])).  # noqa: E501

        :param deadline: The deadline of this JobProperties.  # noqa: E501
        :type: str
        """

        self._deadline = deadline

    @property
    def delay_boot(self):
        """Gets the delay_boot of this JobProperties.  # noqa: E501

        Do not reboot nodes in order to satisfied this job's feature specification if the job has been eligible to run for less than this time period.  # noqa: E501

        :return: The delay_boot of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._delay_boot

    @delay_boot.setter
    def delay_boot(self, delay_boot):
        """Sets the delay_boot of this JobProperties.

        Do not reboot nodes in order to satisfied this job's feature specification if the job has been eligible to run for less than this time period.  # noqa: E501

        :param delay_boot: The delay_boot of this JobProperties.  # noqa: E501
        :type: int
        """

        self._delay_boot = delay_boot

    @property
    def dependency(self):
        """Gets the dependency of this JobProperties.  # noqa: E501

        Defer the start of this job until the specified dependencies have been satisfied completed.  # noqa: E501

        :return: The dependency of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency):
        """Sets the dependency of this JobProperties.

        Defer the start of this job until the specified dependencies have been satisfied completed.  # noqa: E501

        :param dependency: The dependency of this JobProperties.  # noqa: E501
        :type: str
        """

        self._dependency = dependency

    @property
    def distribution(self):
        """Gets the distribution of this JobProperties.  # noqa: E501

        Specify alternate distribution methods for remote processes.  # noqa: E501

        :return: The distribution of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this JobProperties.

        Specify alternate distribution methods for remote processes.  # noqa: E501

        :param distribution: The distribution of this JobProperties.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    @property
    def environment(self):
        """Gets the environment of this JobProperties.  # noqa: E501

        Dictionary of environment entries.  # noqa: E501

        :return: The environment of this JobProperties.  # noqa: E501
        :rtype: object
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this JobProperties.

        Dictionary of environment entries.  # noqa: E501

        :param environment: The environment of this JobProperties.  # noqa: E501
        :type: object
        """

        self._environment = environment

    @property
    def exclusive(self):
        """Gets the exclusive of this JobProperties.  # noqa: E501


        :return: The exclusive of this JobProperties.  # noqa: E501
        :rtype: OneOfjobPropertiesExclusive
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this JobProperties.


        :param exclusive: The exclusive of this JobProperties.  # noqa: E501
        :type: OneOfjobPropertiesExclusive
        """

        self._exclusive = exclusive

    @property
    def get_user_environment(self):
        """Gets the get_user_environment of this JobProperties.  # noqa: E501

        Load new login environment for user on job node.  # noqa: E501

        :return: The get_user_environment of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._get_user_environment

    @get_user_environment.setter
    def get_user_environment(self, get_user_environment):
        """Sets the get_user_environment of this JobProperties.

        Load new login environment for user on job node.  # noqa: E501

        :param get_user_environment: The get_user_environment of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._get_user_environment = get_user_environment

    @property
    def gres(self):
        """Gets the gres of this JobProperties.  # noqa: E501

        Specifies a comma delimited list of generic consumable resources.  # noqa: E501

        :return: The gres of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gres

    @gres.setter
    def gres(self, gres):
        """Sets the gres of this JobProperties.

        Specifies a comma delimited list of generic consumable resources.  # noqa: E501

        :param gres: The gres of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gres = gres

    @property
    def gres_flags(self):
        """Gets the gres_flags of this JobProperties.  # noqa: E501

        Specify generic resource task binding options.  # noqa: E501

        :return: The gres_flags of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gres_flags

    @gres_flags.setter
    def gres_flags(self, gres_flags):
        """Sets the gres_flags of this JobProperties.

        Specify generic resource task binding options.  # noqa: E501

        :param gres_flags: The gres_flags of this JobProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["disable-binding", "enforce-binding"]  # noqa: E501
        if gres_flags not in allowed_values:
            raise ValueError(
                "Invalid value for `gres_flags` ({0}), must be one of {1}"  # noqa: E501
                .format(gres_flags, allowed_values)
            )

        self._gres_flags = gres_flags

    @property
    def gpu_binding(self):
        """Gets the gpu_binding of this JobProperties.  # noqa: E501

        Requested binding of tasks to GPU.  # noqa: E501

        :return: The gpu_binding of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gpu_binding

    @gpu_binding.setter
    def gpu_binding(self, gpu_binding):
        """Sets the gpu_binding of this JobProperties.

        Requested binding of tasks to GPU.  # noqa: E501

        :param gpu_binding: The gpu_binding of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gpu_binding = gpu_binding

    @property
    def gpu_frequency(self):
        """Gets the gpu_frequency of this JobProperties.  # noqa: E501

        Requested GPU frequency.  # noqa: E501

        :return: The gpu_frequency of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gpu_frequency

    @gpu_frequency.setter
    def gpu_frequency(self, gpu_frequency):
        """Sets the gpu_frequency of this JobProperties.

        Requested GPU frequency.  # noqa: E501

        :param gpu_frequency: The gpu_frequency of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gpu_frequency = gpu_frequency

    @property
    def gpus(self):
        """Gets the gpus of this JobProperties.  # noqa: E501

        GPUs per job.  # noqa: E501

        :return: The gpus of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """Sets the gpus of this JobProperties.

        GPUs per job.  # noqa: E501

        :param gpus: The gpus of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gpus = gpus

    @property
    def gpus_per_node(self):
        """Gets the gpus_per_node of this JobProperties.  # noqa: E501

        GPUs per node.  # noqa: E501

        :return: The gpus_per_node of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gpus_per_node

    @gpus_per_node.setter
    def gpus_per_node(self, gpus_per_node):
        """Sets the gpus_per_node of this JobProperties.

        GPUs per node.  # noqa: E501

        :param gpus_per_node: The gpus_per_node of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gpus_per_node = gpus_per_node

    @property
    def gpus_per_socket(self):
        """Gets the gpus_per_socket of this JobProperties.  # noqa: E501

        GPUs per socket.  # noqa: E501

        :return: The gpus_per_socket of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gpus_per_socket

    @gpus_per_socket.setter
    def gpus_per_socket(self, gpus_per_socket):
        """Sets the gpus_per_socket of this JobProperties.

        GPUs per socket.  # noqa: E501

        :param gpus_per_socket: The gpus_per_socket of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gpus_per_socket = gpus_per_socket

    @property
    def gpus_per_task(self):
        """Gets the gpus_per_task of this JobProperties.  # noqa: E501

        GPUs per task.  # noqa: E501

        :return: The gpus_per_task of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._gpus_per_task

    @gpus_per_task.setter
    def gpus_per_task(self, gpus_per_task):
        """Sets the gpus_per_task of this JobProperties.

        GPUs per task.  # noqa: E501

        :param gpus_per_task: The gpus_per_task of this JobProperties.  # noqa: E501
        :type: str
        """

        self._gpus_per_task = gpus_per_task

    @property
    def hold(self):
        """Gets the hold of this JobProperties.  # noqa: E501

        Specify the job is to be submitted in a held state (priority of zero).  # noqa: E501

        :return: The hold of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this JobProperties.

        Specify the job is to be submitted in a held state (priority of zero).  # noqa: E501

        :param hold: The hold of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._hold = hold

    @property
    def kill_on_invalid_dependency(self):
        """Gets the kill_on_invalid_dependency of this JobProperties.  # noqa: E501

        If a job has an invalid dependency, then Slurm is to terminate it.  # noqa: E501

        :return: The kill_on_invalid_dependency of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._kill_on_invalid_dependency

    @kill_on_invalid_dependency.setter
    def kill_on_invalid_dependency(self, kill_on_invalid_dependency):
        """Sets the kill_on_invalid_dependency of this JobProperties.

        If a job has an invalid dependency, then Slurm is to terminate it.  # noqa: E501

        :param kill_on_invalid_dependency: The kill_on_invalid_dependency of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._kill_on_invalid_dependency = kill_on_invalid_dependency

    @property
    def licenses(self):
        """Gets the licenses of this JobProperties.  # noqa: E501

        Specification of licenses (or other resources available on all nodes of the cluster) which must be allocated to this job.  # noqa: E501

        :return: The licenses of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this JobProperties.

        Specification of licenses (or other resources available on all nodes of the cluster) which must be allocated to this job.  # noqa: E501

        :param licenses: The licenses of this JobProperties.  # noqa: E501
        :type: str
        """

        self._licenses = licenses

    @property
    def mail_type(self):
        """Gets the mail_type of this JobProperties.  # noqa: E501

        Notify user by email when certain event types occur.  # noqa: E501

        :return: The mail_type of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._mail_type

    @mail_type.setter
    def mail_type(self, mail_type):
        """Sets the mail_type of this JobProperties.

        Notify user by email when certain event types occur.  # noqa: E501

        :param mail_type: The mail_type of this JobProperties.  # noqa: E501
        :type: str
        """

        self._mail_type = mail_type

    @property
    def mail_user(self):
        """Gets the mail_user of this JobProperties.  # noqa: E501

        User to receive email notification of state changes as defined by mail_type.  # noqa: E501

        :return: The mail_user of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._mail_user

    @mail_user.setter
    def mail_user(self, mail_user):
        """Sets the mail_user of this JobProperties.

        User to receive email notification of state changes as defined by mail_type.  # noqa: E501

        :param mail_user: The mail_user of this JobProperties.  # noqa: E501
        :type: str
        """

        self._mail_user = mail_user

    @property
    def mcs_label(self):
        """Gets the mcs_label of this JobProperties.  # noqa: E501

        This parameter is a group among the groups of the user.  # noqa: E501

        :return: The mcs_label of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._mcs_label

    @mcs_label.setter
    def mcs_label(self, mcs_label):
        """Sets the mcs_label of this JobProperties.

        This parameter is a group among the groups of the user.  # noqa: E501

        :param mcs_label: The mcs_label of this JobProperties.  # noqa: E501
        :type: str
        """

        self._mcs_label = mcs_label

    @property
    def memory_binding(self):
        """Gets the memory_binding of this JobProperties.  # noqa: E501

        Bind tasks to memory.  # noqa: E501

        :return: The memory_binding of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._memory_binding

    @memory_binding.setter
    def memory_binding(self, memory_binding):
        """Sets the memory_binding of this JobProperties.

        Bind tasks to memory.  # noqa: E501

        :param memory_binding: The memory_binding of this JobProperties.  # noqa: E501
        :type: str
        """

        self._memory_binding = memory_binding

    @property
    def memory_per_cpu(self):
        """Gets the memory_per_cpu of this JobProperties.  # noqa: E501

        Minimum real memory per cpu (MB).  # noqa: E501

        :return: The memory_per_cpu of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._memory_per_cpu

    @memory_per_cpu.setter
    def memory_per_cpu(self, memory_per_cpu):
        """Sets the memory_per_cpu of this JobProperties.

        Minimum real memory per cpu (MB).  # noqa: E501

        :param memory_per_cpu: The memory_per_cpu of this JobProperties.  # noqa: E501
        :type: int
        """

        self._memory_per_cpu = memory_per_cpu

    @property
    def memory_per_gpu(self):
        """Gets the memory_per_gpu of this JobProperties.  # noqa: E501

        Minimum memory required per allocated GPU.  # noqa: E501

        :return: The memory_per_gpu of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._memory_per_gpu

    @memory_per_gpu.setter
    def memory_per_gpu(self, memory_per_gpu):
        """Sets the memory_per_gpu of this JobProperties.

        Minimum memory required per allocated GPU.  # noqa: E501

        :param memory_per_gpu: The memory_per_gpu of this JobProperties.  # noqa: E501
        :type: int
        """

        self._memory_per_gpu = memory_per_gpu

    @property
    def memory_per_node(self):
        """Gets the memory_per_node of this JobProperties.  # noqa: E501

        Minimum real memory per node (MB).  # noqa: E501

        :return: The memory_per_node of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._memory_per_node

    @memory_per_node.setter
    def memory_per_node(self, memory_per_node):
        """Sets the memory_per_node of this JobProperties.

        Minimum real memory per node (MB).  # noqa: E501

        :param memory_per_node: The memory_per_node of this JobProperties.  # noqa: E501
        :type: int
        """

        self._memory_per_node = memory_per_node

    @property
    def minimum_cpus_per_node(self):
        """Gets the minimum_cpus_per_node of this JobProperties.  # noqa: E501

        Minimum number of CPUs per node.  # noqa: E501

        :return: The minimum_cpus_per_node of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._minimum_cpus_per_node

    @minimum_cpus_per_node.setter
    def minimum_cpus_per_node(self, minimum_cpus_per_node):
        """Sets the minimum_cpus_per_node of this JobProperties.

        Minimum number of CPUs per node.  # noqa: E501

        :param minimum_cpus_per_node: The minimum_cpus_per_node of this JobProperties.  # noqa: E501
        :type: int
        """

        self._minimum_cpus_per_node = minimum_cpus_per_node

    @property
    def minimum_nodes(self):
        """Gets the minimum_nodes of this JobProperties.  # noqa: E501

        If a range of node counts is given, prefer the smaller count.  # noqa: E501

        :return: The minimum_nodes of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._minimum_nodes

    @minimum_nodes.setter
    def minimum_nodes(self, minimum_nodes):
        """Sets the minimum_nodes of this JobProperties.

        If a range of node counts is given, prefer the smaller count.  # noqa: E501

        :param minimum_nodes: The minimum_nodes of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._minimum_nodes = minimum_nodes

    @property
    def name(self):
        """Gets the name of this JobProperties.  # noqa: E501

        Specify a name for the job allocation.  # noqa: E501

        :return: The name of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobProperties.

        Specify a name for the job allocation.  # noqa: E501

        :param name: The name of this JobProperties.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nice(self):
        """Gets the nice of this JobProperties.  # noqa: E501

        Run the job with an adjusted scheduling priority within Slurm.  # noqa: E501

        :return: The nice of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._nice

    @nice.setter
    def nice(self, nice):
        """Sets the nice of this JobProperties.

        Run the job with an adjusted scheduling priority within Slurm.  # noqa: E501

        :param nice: The nice of this JobProperties.  # noqa: E501
        :type: str
        """

        self._nice = nice

    @property
    def no_kill(self):
        """Gets the no_kill of this JobProperties.  # noqa: E501

        Do not automatically terminate a job if one of the nodes it has been allocated fails.  # noqa: E501

        :return: The no_kill of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._no_kill

    @no_kill.setter
    def no_kill(self, no_kill):
        """Sets the no_kill of this JobProperties.

        Do not automatically terminate a job if one of the nodes it has been allocated fails.  # noqa: E501

        :param no_kill: The no_kill of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._no_kill = no_kill

    @property
    def nodes(self):
        """Gets the nodes of this JobProperties.  # noqa: E501


        :return: The nodes of this JobProperties.  # noqa: E501
        :rtype: OneOfjobPropertiesNodes
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this JobProperties.


        :param nodes: The nodes of this JobProperties.  # noqa: E501
        :type: OneOfjobPropertiesNodes
        """

        self._nodes = nodes

    @property
    def open_mode(self):
        """Gets the open_mode of this JobProperties.  # noqa: E501

        Open the output and error files using append or truncate mode as specified.  # noqa: E501

        :return: The open_mode of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._open_mode

    @open_mode.setter
    def open_mode(self, open_mode):
        """Sets the open_mode of this JobProperties.

        Open the output and error files using append or truncate mode as specified.  # noqa: E501

        :param open_mode: The open_mode of this JobProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["append", "truncate"]  # noqa: E501
        if open_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `open_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(open_mode, allowed_values)
            )

        self._open_mode = open_mode

    @property
    def partition(self):
        """Gets the partition of this JobProperties.  # noqa: E501

        Request a specific partition for the resource allocation.  # noqa: E501

        :return: The partition of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this JobProperties.

        Request a specific partition for the resource allocation.  # noqa: E501

        :param partition: The partition of this JobProperties.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def priority(self):
        """Gets the priority of this JobProperties.  # noqa: E501

        Request a specific job priority.  # noqa: E501

        :return: The priority of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobProperties.

        Request a specific job priority.  # noqa: E501

        :param priority: The priority of this JobProperties.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def qos(self):
        """Gets the qos of this JobProperties.  # noqa: E501

        Request a quality of service for the job.  # noqa: E501

        :return: The qos of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this JobProperties.

        Request a quality of service for the job.  # noqa: E501

        :param qos: The qos of this JobProperties.  # noqa: E501
        :type: str
        """

        self._qos = qos

    @property
    def requeue(self):
        """Gets the requeue of this JobProperties.  # noqa: E501

        Specifies that the batch job should eligible to being requeue.  # noqa: E501

        :return: The requeue of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._requeue

    @requeue.setter
    def requeue(self, requeue):
        """Sets the requeue of this JobProperties.

        Specifies that the batch job should eligible to being requeue.  # noqa: E501

        :param requeue: The requeue of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._requeue = requeue

    @property
    def reservation(self):
        """Gets the reservation of this JobProperties.  # noqa: E501

        Allocate resources for the job from the named reservation.  # noqa: E501

        :return: The reservation of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this JobProperties.

        Allocate resources for the job from the named reservation.  # noqa: E501

        :param reservation: The reservation of this JobProperties.  # noqa: E501
        :type: str
        """

        self._reservation = reservation

    @property
    def signal(self):
        """Gets the signal of this JobProperties.  # noqa: E501

        When a job is within sig_time seconds of its end time, send it the signal sig_num.  # noqa: E501

        :return: The signal of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this JobProperties.

        When a job is within sig_time seconds of its end time, send it the signal sig_num.  # noqa: E501

        :param signal: The signal of this JobProperties.  # noqa: E501
        :type: str
        """

        self._signal = signal

    @property
    def sockets_per_node(self):
        """Gets the sockets_per_node of this JobProperties.  # noqa: E501

        Restrict node selection to nodes with at least the specified number of sockets.  # noqa: E501

        :return: The sockets_per_node of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._sockets_per_node

    @sockets_per_node.setter
    def sockets_per_node(self, sockets_per_node):
        """Sets the sockets_per_node of this JobProperties.

        Restrict node selection to nodes with at least the specified number of sockets.  # noqa: E501

        :param sockets_per_node: The sockets_per_node of this JobProperties.  # noqa: E501
        :type: int
        """

        self._sockets_per_node = sockets_per_node

    @property
    def spread_job(self):
        """Gets the spread_job of this JobProperties.  # noqa: E501

        Spread the job allocation over as many nodes as possible and attempt to evenly distribute tasks across the allocated nodes.  # noqa: E501

        :return: The spread_job of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._spread_job

    @spread_job.setter
    def spread_job(self, spread_job):
        """Sets the spread_job of this JobProperties.

        Spread the job allocation over as many nodes as possible and attempt to evenly distribute tasks across the allocated nodes.  # noqa: E501

        :param spread_job: The spread_job of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._spread_job = spread_job

    @property
    def standard_error(self):
        """Gets the standard_error of this JobProperties.  # noqa: E501

        Instruct Slurm to connect the batch script's standard error directly to the file name.  # noqa: E501

        :return: The standard_error of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._standard_error

    @standard_error.setter
    def standard_error(self, standard_error):
        """Sets the standard_error of this JobProperties.

        Instruct Slurm to connect the batch script's standard error directly to the file name.  # noqa: E501

        :param standard_error: The standard_error of this JobProperties.  # noqa: E501
        :type: str
        """

        self._standard_error = standard_error

    @property
    def standard_in(self):
        """Gets the standard_in of this JobProperties.  # noqa: E501

        Instruct Slurm to connect the batch script's standard input directly to the file name specified.  # noqa: E501

        :return: The standard_in of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._standard_in

    @standard_in.setter
    def standard_in(self, standard_in):
        """Sets the standard_in of this JobProperties.

        Instruct Slurm to connect the batch script's standard input directly to the file name specified.  # noqa: E501

        :param standard_in: The standard_in of this JobProperties.  # noqa: E501
        :type: str
        """

        self._standard_in = standard_in

    @property
    def standard_out(self):
        """Gets the standard_out of this JobProperties.  # noqa: E501

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :return: The standard_out of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._standard_out

    @standard_out.setter
    def standard_out(self, standard_out):
        """Sets the standard_out of this JobProperties.

        Instruct Slurm to connect the batch script's standard output directly to the file name.  # noqa: E501

        :param standard_out: The standard_out of this JobProperties.  # noqa: E501
        :type: str
        """

        self._standard_out = standard_out

    @property
    def tasks(self):
        """Gets the tasks of this JobProperties.  # noqa: E501

        Advises the Slurm controller that job steps run within the allocation will launch a maximum of number tasks and to provide for sufficient resources.  # noqa: E501

        :return: The tasks of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this JobProperties.

        Advises the Slurm controller that job steps run within the allocation will launch a maximum of number tasks and to provide for sufficient resources.  # noqa: E501

        :param tasks: The tasks of this JobProperties.  # noqa: E501
        :type: int
        """

        self._tasks = tasks

    @property
    def tasks_per_core(self):
        """Gets the tasks_per_core of this JobProperties.  # noqa: E501

        Request the maximum ntasks be invoked on each core.  # noqa: E501

        :return: The tasks_per_core of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_core

    @tasks_per_core.setter
    def tasks_per_core(self, tasks_per_core):
        """Sets the tasks_per_core of this JobProperties.

        Request the maximum ntasks be invoked on each core.  # noqa: E501

        :param tasks_per_core: The tasks_per_core of this JobProperties.  # noqa: E501
        :type: int
        """

        self._tasks_per_core = tasks_per_core

    @property
    def tasks_per_node(self):
        """Gets the tasks_per_node of this JobProperties.  # noqa: E501

        Request the maximum ntasks be invoked on each node.  # noqa: E501

        :return: The tasks_per_node of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_node

    @tasks_per_node.setter
    def tasks_per_node(self, tasks_per_node):
        """Sets the tasks_per_node of this JobProperties.

        Request the maximum ntasks be invoked on each node.  # noqa: E501

        :param tasks_per_node: The tasks_per_node of this JobProperties.  # noqa: E501
        :type: int
        """

        self._tasks_per_node = tasks_per_node

    @property
    def tasks_per_socket(self):
        """Gets the tasks_per_socket of this JobProperties.  # noqa: E501

        Request the maximum ntasks be invoked on each socket.  # noqa: E501

        :return: The tasks_per_socket of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._tasks_per_socket

    @tasks_per_socket.setter
    def tasks_per_socket(self, tasks_per_socket):
        """Sets the tasks_per_socket of this JobProperties.

        Request the maximum ntasks be invoked on each socket.  # noqa: E501

        :param tasks_per_socket: The tasks_per_socket of this JobProperties.  # noqa: E501
        :type: int
        """

        self._tasks_per_socket = tasks_per_socket

    @property
    def thread_specification(self):
        """Gets the thread_specification of this JobProperties.  # noqa: E501

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :return: The thread_specification of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._thread_specification

    @thread_specification.setter
    def thread_specification(self, thread_specification):
        """Sets the thread_specification of this JobProperties.

        Count of specialized threads per node reserved by the job for system operations and not used by the application.  # noqa: E501

        :param thread_specification: The thread_specification of this JobProperties.  # noqa: E501
        :type: int
        """

        self._thread_specification = thread_specification

    @property
    def threads_per_core(self):
        """Gets the threads_per_core of this JobProperties.  # noqa: E501

        Restrict node selection to nodes with at least the specified number of threads per core.  # noqa: E501

        :return: The threads_per_core of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._threads_per_core

    @threads_per_core.setter
    def threads_per_core(self, threads_per_core):
        """Sets the threads_per_core of this JobProperties.

        Restrict node selection to nodes with at least the specified number of threads per core.  # noqa: E501

        :param threads_per_core: The threads_per_core of this JobProperties.  # noqa: E501
        :type: int
        """

        self._threads_per_core = threads_per_core

    @property
    def time_limit(self):
        """Gets the time_limit of this JobProperties.  # noqa: E501

        Step time limit.  # noqa: E501

        :return: The time_limit of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit):
        """Sets the time_limit of this JobProperties.

        Step time limit.  # noqa: E501

        :param time_limit: The time_limit of this JobProperties.  # noqa: E501
        :type: int
        """

        self._time_limit = time_limit

    @property
    def time_minimum(self):
        """Gets the time_minimum of this JobProperties.  # noqa: E501

        Minimum run time in minutes.  # noqa: E501

        :return: The time_minimum of this JobProperties.  # noqa: E501
        :rtype: int
        """
        return self._time_minimum

    @time_minimum.setter
    def time_minimum(self, time_minimum):
        """Sets the time_minimum of this JobProperties.

        Minimum run time in minutes.  # noqa: E501

        :param time_minimum: The time_minimum of this JobProperties.  # noqa: E501
        :type: int
        """

        self._time_minimum = time_minimum

    @property
    def wait_all_nodes(self):
        """Gets the wait_all_nodes of this JobProperties.  # noqa: E501

        Do not begin execution until all nodes are ready for use.  # noqa: E501

        :return: The wait_all_nodes of this JobProperties.  # noqa: E501
        :rtype: bool
        """
        return self._wait_all_nodes

    @wait_all_nodes.setter
    def wait_all_nodes(self, wait_all_nodes):
        """Sets the wait_all_nodes of this JobProperties.

        Do not begin execution until all nodes are ready for use.  # noqa: E501

        :param wait_all_nodes: The wait_all_nodes of this JobProperties.  # noqa: E501
        :type: bool
        """

        self._wait_all_nodes = wait_all_nodes

    @property
    def wckey(self):
        """Gets the wckey of this JobProperties.  # noqa: E501

        Specify wckey to be used with job.  # noqa: E501

        :return: The wckey of this JobProperties.  # noqa: E501
        :rtype: str
        """
        return self._wckey

    @wckey.setter
    def wckey(self, wckey):
        """Sets the wckey of this JobProperties.

        Specify wckey to be used with job.  # noqa: E501

        :param wckey: The wckey of this JobProperties.  # noqa: E501
        :type: str
        """

        self._wckey = wckey

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

